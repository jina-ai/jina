name: CI

on:
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'README.md'

#on:
#  push:
#    branches-ignore:
#      - '**'  # temporally ignore all
jobs:
  commit-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.5.0
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v4

  lint-flake-8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.5.0
      - name: Set up Python 3.7
        uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Lint with flake8
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude .git,__pycache__,docs/source/conf.py,old,build,dist,tests/,jina/resources/,jina/proto/pb/jina_pb2.py,jina/proto/pb/jina_pb2_grpc.py,jina/proto/pb2/jina_pb2.py,jina/proto/pb2/jina_pb2_grpc.py
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude .git,__pycache__,docs/source/conf.py,old,build,dist,tests/,jina/resources/,jina/proto/pb/jina_pb2.py,jina/proto/pb/jina_pb2_grpc.py,jina/proto/pb2/jina_pb2.py,jina/proto/pb2/jina_pb2_grpc.py

  check-docstring:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.5.0
        with:
          fetch-depth: 0
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - id: file_changes
        uses: Ana06/get-changed-files@v1.2
      - name: docstring check with darglint and pydocstyle
        run: ./scripts/docstrings_lint.sh
        env:
          CHANGED_FILES: ${{ steps.file_changes.outputs.added_modified }}

  check-black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.5.0
        with:
          fetch-depth: 0
      - name: Set up Python 3.7
        uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - id: file_changes
        uses: Ana06/get-changed-files@v1.2
      - name: check black
        run: ./scripts/black.sh
        env:
          CHANGED_FILES: ${{ steps.file_changes.outputs.added_modified }}

  code-injection:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.5.0
        if: ${{ !github.event.pull_request.head.repo.fork }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python 3.7
        uses: actions/setup-python@v4
        if: ${{ !github.event.pull_request.head.repo.fork }}
        with:
          python-version: 3.7
      - name: Styling
        id: styling
        if: ${{ !github.event.pull_request.head.repo.fork }}
        run: |
          git config --local user.email "dev-bot@jina.ai"
          git config --local user.name "Jina Dev Bot"
          pip install ".[devel,black]"
          pip install setuptools
          cd scripts && bash ./devbot.sh && cd -
          if [[ -z $(git status -s) ]]
          then
            echo "tree is clean"
          else
            git add -u
            git commit -m "style: fix overload and cli autocomplete"
            echo "IS_CHANGED=YES" >> $GITHUB_OUTPUT
          fi
      - name: Push changes to head ref
        uses: ad-m/github-push-action@v0.6.0
        if: ${{ !github.event.pull_request.head.repo.fork }}
        with:
          github_token: ${{ secrets.JINA_DEV_BOT }}
          branch: ${{ github.head_ref }}
      - name: Fail this pipelint
        if: ${{ steps.styling.outputs.IS_CHANGED == 'YES' && !github.event.pull_request.head.repo.fork }}
        run: exit 1

  docker-image-test:
    needs: [code-injection]
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    strategy:
      fail-fast: false
      matrix:
        test-arch: ["linux/amd64", "linux/arm64"]
    steps:
#      - name: Cancel Previous Runs
#        uses: styfle/cancel-workflow-action@0.9.0
#        with:
#          access_token: ${{ github.token }}
      - uses: actions/checkout@v2.5.0
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
          driver-opts: network=host
      - run: |
          docker run --privileged --rm tonistiigi/binfmt --uninstall qemu-aarch64
          docker run --rm --privileged tonistiigi/binfmt --install all
      - name: Build and test
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfiles/debianx.Dockerfile
          platforms: ${{ matrix.test-arch }}
          push: true
          tags: localhost:5000/jina/multiarch:latest
          target: jina
      - run: |
          docker run --platform ${{ matrix.test-arch }} localhost:5000/jina/multiarch:latest -v

  hub-test:
    runs-on: ubuntu-latest
    needs: [lint-flake-8, code-injection]
    if: ${{ !github.event.pull_request.head.repo.fork }}
    steps:
#      - name: Cancel Previous Runs
#        uses: styfle/cancel-workflow-action@0.9.0
#        with:
#          access_token: ${{ github.token }}
      - uses: actions/checkout@v2.5.0
      - name: Set up Python 3.7
        uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Test hubapp with hubpods
        run: |
          ./tests/jinahub/test_integration.sh
        timeout-minutes: 30
        env:
          JINAHUB_USERNAME: ${{ secrets.JINAHUB_USERNAME }}
          JINAHUB_PASSWORD: ${{ secrets.JINAHUB_PASSWORD }}

  k8s-test:
    needs: [lint-flake-8, code-injection]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.5.0
      - name: Set up Python 3.7
        uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Prepare enviroment
        run: |
          docker build -f Dockerfiles/test-pip.Dockerfile -t jinaai/jina:test-pip .
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install ".[all]" --no-cache-dir
          jina
          export JINA_LOG_LEVEL="ERROR"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Test k8s
        run: |
          export LINKERD2_VERSION=stable-2.11.4
          curl --proto '=https' --tlsv1.2 -sSfL https://run.linkerd.io/install | sh
          pytest -v -s --suppress-no-test-exit-code --force-flaky --min-passes 1 --max-runs 5 --cov=jina --cov-report=xml ./tests/k8s/test_k8s.py ./tests/k8s/test_graceful_request_handling.py
        timeout-minutes: 30
        env:
          JINA_K8S_USE_TEST_PIP: 1
      - name: Check codecov file
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "coverage.xml"
      - name: Upload coverage from test to Codecov
        uses: codecov/codecov-action@v3.1.1
        if: steps.check_files.outputs.files_exists == 'true' && ${{ matrix.python-version }} == '3.7'
        with:
          file: coverage.xml
          name: ${{ matrix.test-path }}-codecov
          flags: ${{ steps.test.outputs.codecov_flag }}
          fail_ci_if_error: false

  k8s-failures-test:
    needs: [ lint-flake-8, code-injection ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.5.0
      - name: Set up Python 3.7
        uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Prepare enviroment
        run: |
          docker build -f Dockerfiles/test-pip.Dockerfile -t jinaai/jina:test-pip .
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install ".[all]" --no-cache-dir
          jina
          export JINA_LOG_LEVEL="ERROR"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Test k8s
        run: |
          export LINKERD2_VERSION=stable-2.11.4
          curl --proto '=https' --tlsv1.2 -sSfL https://run.linkerd.io/install | sh
          curl --proto '=https' --tlsv1.2 -sSfL https://linkerd.github.io/linkerd-smi/install | sh
          pytest -v -s --suppress-no-test-exit-code --force-flaky --min-passes 1 --max-runs 5 --cov=jina --cov-report=xml ./tests/k8s/test_k8s_failures.py
        timeout-minutes: 30
        env:
          JINA_K8S_USE_TEST_PIP: 1
      - name: Check codecov file
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "coverage.xml"
      - name: Upload coverage from test to Codecov
        uses: codecov/codecov-action@v3.1.1
        if: steps.check_files.outputs.files_exists == 'true' && ${{ matrix.python-version }} == '3.7'
        with:
          file: coverage.xml
          name: ${{ matrix.test-path }}-codecov
          flags: ${{ steps.test.outputs.codecov_flag }}
          fail_ci_if_error: false

  k8s-otel-test:
    needs: [lint-flake-8, code-injection]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.5.0
      - name: Set up Python 3.7
        uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Prepare enviroment
        run: |
          docker build -f Dockerfiles/test-pip.Dockerfile -t jinaai/jina:test-pip .
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install ".[all]" --no-cache-dir
          jina
          export JINA_LOG_LEVEL="ERROR"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Test k8s
        run: |
          pytest -v -s --cov=jina --cov-report=xml ./tests/k8s_otel
        timeout-minutes: 30
        env:
          JINA_K8S_USE_TEST_PIP: 1
      - name: Check codecov file
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "coverage.xml"
      - name: Upload coverage from test to Codecov
        uses: codecov/codecov-action@v3.1.1
        if: steps.check_files.outputs.files_exists == 'true' && ${{ matrix.python-version }} == '3.7'
        with:
          file: coverage.xml
          name: ${{ matrix.test-path }}-codecov
          flags: ${{ steps.test.outputs.codecov_flag }}
          fail_ci_if_error: false


  docker-compose-test:
    needs: [lint-flake-8, code-injection]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.5.0
      - name: Set up Python 3.7
        uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Prepare enviroment
        run: |
          docker build -f Dockerfiles/test-pip.Dockerfile -t jinaai/jina:test-pip .
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install ".[all]" --no-cache-dir
          jina
          export JINA_LOG_LEVEL="ERROR"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Test docker compose
        run: |
          pytest -v -s --suppress-no-test-exit-code --force-flaky --min-passes 1 --max-runs 5 --cov=jina --cov-report=xml ./tests/docker_compose/test_*.py
        timeout-minutes: 30
      - name: Check codecov file
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "coverage.xml"
      - name: Upload coverage from test to Codecov
        uses: codecov/codecov-action@v3.1.1
        if: steps.check_files.outputs.files_exists == 'true' && ${{ matrix.python-version }} == '3.7'
        with:
          file: coverage.xml
          name: ${{ matrix.test-path }}-codecov
          flags: ${{ steps.test.outputs.codecov_flag }}
          fail_ci_if_error: false

  prep-testbed:
    runs-on: ubuntu-latest
    needs: [ lint-flake-8, code-injection]
    steps:
      - uses: actions/checkout@v2.5.0
      - id: set-matrix
        run: |
          sudo apt-get install jq
          export value=$(bash scripts/get-all-test-paths.sh)
          echo "matrix=$value" >> $GITHUB_OUTPUT
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  core-test:
    needs: prep-testbed
    runs-on: ubuntu-latest
    env:
      JINA_RANDOM_PORT_MIN: 16384
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]
        test-path: ${{fromJson(needs.prep-testbed.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2.5.0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Prepare environment
        run: |
          docker build -f Dockerfiles/test-pip.Dockerfile -t jinaai/jina:test-pip .
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install ".[all]" --no-cache-dir
          jina
          export JINA_LOG_LEVEL="ERROR"
      - name: Test
        id: test
        run: |
          pytest --suppress-no-test-exit-code --force-flaky --min-passes 1 --max-runs 5 --cov=jina --cov-report=xml --timeout=600 -v -s --ignore-glob='tests/integration/hub_usage/dummyhub*' ${{ matrix.test-path }}

          echo "flag it as jina for codeoverage"
          echo "codecov_flag=jina" >> $GITHUB_OUTPUT
        timeout-minutes: 30
        env:
          JINA_AUTH_TOKEN: "${{ secrets.JINA_AUTH_TOKEN }}"
      - name: Check codecov file
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "coverage.xml"
      - name: Upload coverage from test to Codecov
        uses: codecov/codecov-action@v3.1.1
        if: steps.check_files.outputs.files_exists == 'true' && ${{ matrix.python-version }} == '3.7'
        with:
          file: coverage.xml
          name: ${{ matrix.test-path }}-codecov
          flags: ${{ steps.test.outputs.codecov_flag }}
          fail_ci_if_error: false

  import-test:
    runs-on: ubuntu-latest
    needs: [lint-flake-8, code-injection ]
    strategy:
      fail-fast: false
      matrix:
        core: ['', 'true']
        perf: ['', 'true']
        exclude: 
          - core: 'true'
            perf: 'true'
    steps:
      - uses: actions/checkout@v2.5.0
      - name: Set up Python 3.7
        uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Prepare enviroment
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install --no-cache-dir .
        env:
          JINA_PIP_INSTALL_CORE: ${{ matrix.core }}
          JINA_PIP_INSTALL_PERF: ${{ matrix.perf }}
      - name: Test basic import
        run: python -c 'from jina import Executor,requests'
      - name: Test import all
        run: python -c 'from jina import *'


  # just for blocking the merge until all parallel core-test are successful
  success-all-test:
    runs-on: ubuntu-latest
    needs: [commit-lint, core-test, import-test, hub-test, k8s-test, k8s-failures-test, docker-compose-test, docker-image-test, check-docstring, check-black, code-injection]
    if: always()
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - name: Check Failure
        if: env.WORKFLOW_CONCLUSION == 'failure'
        run: exit 1
      - name: Success
        if: ${{ success() }}
        run: echo "All Done"
