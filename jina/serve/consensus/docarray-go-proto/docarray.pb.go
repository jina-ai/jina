// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.13.0
// source: docarray.proto

package docarray_go_proto

import (
	_struct "github.com/golang/protobuf/ptypes/struct"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// Represents a (quantized) dense n-dim array
type DenseNdArrayProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the actual array data, in bytes
	Buffer []byte `protobuf:"bytes,1,opt,name=buffer,proto3" json:"buffer,omitempty"`
	// the shape (dimensions) of the array
	Shape []uint32 `protobuf:"varint,2,rep,packed,name=shape,proto3" json:"shape,omitempty"`
	// the data type of the array
	Dtype string `protobuf:"bytes,3,opt,name=dtype,proto3" json:"dtype,omitempty"`
}

func (x *DenseNdArrayProto) Reset() {
	*x = DenseNdArrayProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docarray_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DenseNdArrayProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DenseNdArrayProto) ProtoMessage() {}

func (x *DenseNdArrayProto) ProtoReflect() protoreflect.Message {
	mi := &file_docarray_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DenseNdArrayProto.ProtoReflect.Descriptor instead.
func (*DenseNdArrayProto) Descriptor() ([]byte, []int) {
	return file_docarray_proto_rawDescGZIP(), []int{0}
}

func (x *DenseNdArrayProto) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

func (x *DenseNdArrayProto) GetShape() []uint32 {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *DenseNdArrayProto) GetDtype() string {
	if x != nil {
		return x.Dtype
	}
	return ""
}

//*
// Represents a general n-dim array, can be either dense or sparse
type NdArrayProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dense      *DenseNdArrayProto `protobuf:"bytes,1,opt,name=dense,proto3" json:"dense,omitempty"` // dense representation of the ndarray
	Parameters *_struct.Struct    `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *NdArrayProto) Reset() {
	*x = NdArrayProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docarray_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NdArrayProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NdArrayProto) ProtoMessage() {}

func (x *NdArrayProto) ProtoReflect() protoreflect.Message {
	mi := &file_docarray_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NdArrayProto.ProtoReflect.Descriptor instead.
func (*NdArrayProto) Descriptor() ([]byte, []int) {
	return file_docarray_proto_rawDescGZIP(), []int{1}
}

func (x *NdArrayProto) GetDense() *DenseNdArrayProto {
	if x != nil {
		return x.Dense
	}
	return nil
}

func (x *NdArrayProto) GetParameters() *_struct.Struct {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type KeyValuePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *_struct.Value `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *_struct.Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValuePair) Reset() {
	*x = KeyValuePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docarray_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValuePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValuePair) ProtoMessage() {}

func (x *KeyValuePair) ProtoReflect() protoreflect.Message {
	mi := &file_docarray_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValuePair.ProtoReflect.Descriptor instead.
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return file_docarray_proto_rawDescGZIP(), []int{2}
}

func (x *KeyValuePair) GetKey() *_struct.Value {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KeyValuePair) GetValue() *_struct.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type GenericDictValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*KeyValuePair `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *GenericDictValue) Reset() {
	*x = GenericDictValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docarray_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericDictValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericDictValue) ProtoMessage() {}

func (x *GenericDictValue) ProtoReflect() protoreflect.Message {
	mi := &file_docarray_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericDictValue.ProtoReflect.Descriptor instead.
func (*GenericDictValue) Descriptor() ([]byte, []int) {
	return file_docarray_proto_rawDescGZIP(), []int{3}
}

func (x *GenericDictValue) GetEntries() []*KeyValuePair {
	if x != nil {
		return x.Entries
	}
	return nil
}

type NodeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//	*NodeProto_Text
	//	*NodeProto_Integer
	//	*NodeProto_Float
	//	*NodeProto_Boolean
	//	*NodeProto_Blob
	//	*NodeProto_Ndarray
	//	*NodeProto_Doc
	//	*NodeProto_DocArray
	//	*NodeProto_List
	//	*NodeProto_Set
	//	*NodeProto_Tuple
	//	*NodeProto_Dict
	Content isNodeProto_Content `protobuf_oneof:"content"`
	// Types that are assignable to DocarrayType:
	//	*NodeProto_Type
	DocarrayType isNodeProto_DocarrayType `protobuf_oneof:"docarray_type"`
}

func (x *NodeProto) Reset() {
	*x = NodeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docarray_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeProto) ProtoMessage() {}

func (x *NodeProto) ProtoReflect() protoreflect.Message {
	mi := &file_docarray_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeProto.ProtoReflect.Descriptor instead.
func (*NodeProto) Descriptor() ([]byte, []int) {
	return file_docarray_proto_rawDescGZIP(), []int{4}
}

func (m *NodeProto) GetContent() isNodeProto_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *NodeProto) GetText() string {
	if x, ok := x.GetContent().(*NodeProto_Text); ok {
		return x.Text
	}
	return ""
}

func (x *NodeProto) GetInteger() int32 {
	if x, ok := x.GetContent().(*NodeProto_Integer); ok {
		return x.Integer
	}
	return 0
}

func (x *NodeProto) GetFloat() float64 {
	if x, ok := x.GetContent().(*NodeProto_Float); ok {
		return x.Float
	}
	return 0
}

func (x *NodeProto) GetBoolean() bool {
	if x, ok := x.GetContent().(*NodeProto_Boolean); ok {
		return x.Boolean
	}
	return false
}

func (x *NodeProto) GetBlob() []byte {
	if x, ok := x.GetContent().(*NodeProto_Blob); ok {
		return x.Blob
	}
	return nil
}

func (x *NodeProto) GetNdarray() *NdArrayProto {
	if x, ok := x.GetContent().(*NodeProto_Ndarray); ok {
		return x.Ndarray
	}
	return nil
}

func (x *NodeProto) GetDoc() *DocProto {
	if x, ok := x.GetContent().(*NodeProto_Doc); ok {
		return x.Doc
	}
	return nil
}

func (x *NodeProto) GetDocArray() *DocListProto {
	if x, ok := x.GetContent().(*NodeProto_DocArray); ok {
		return x.DocArray
	}
	return nil
}

func (x *NodeProto) GetList() *ListOfAnyProto {
	if x, ok := x.GetContent().(*NodeProto_List); ok {
		return x.List
	}
	return nil
}

func (x *NodeProto) GetSet() *ListOfAnyProto {
	if x, ok := x.GetContent().(*NodeProto_Set); ok {
		return x.Set
	}
	return nil
}

func (x *NodeProto) GetTuple() *ListOfAnyProto {
	if x, ok := x.GetContent().(*NodeProto_Tuple); ok {
		return x.Tuple
	}
	return nil
}

func (x *NodeProto) GetDict() *DictOfAnyProto {
	if x, ok := x.GetContent().(*NodeProto_Dict); ok {
		return x.Dict
	}
	return nil
}

func (m *NodeProto) GetDocarrayType() isNodeProto_DocarrayType {
	if m != nil {
		return m.DocarrayType
	}
	return nil
}

func (x *NodeProto) GetType() string {
	if x, ok := x.GetDocarrayType().(*NodeProto_Type); ok {
		return x.Type
	}
	return ""
}

type isNodeProto_Content interface {
	isNodeProto_Content()
}

type NodeProto_Text struct {
	// a text
	Text string `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

type NodeProto_Integer struct {
	//an integer
	Integer int32 `protobuf:"varint,2,opt,name=integer,proto3,oneof"`
}

type NodeProto_Float struct {
	// a float
	Float float64 `protobuf:"fixed64,3,opt,name=float,proto3,oneof"`
}

type NodeProto_Boolean struct {
	//a boolean
	Boolean bool `protobuf:"varint,4,opt,name=boolean,proto3,oneof"`
}

type NodeProto_Blob struct {
	// a bytes representation
	Blob []byte `protobuf:"bytes,5,opt,name=blob,proto3,oneof"`
}

type NodeProto_Ndarray struct {
	// the ndarray of the image/audio/video document
	Ndarray *NdArrayProto `protobuf:"bytes,6,opt,name=ndarray,proto3,oneof"`
}

type NodeProto_Doc struct {
	// a sub Document
	Doc *DocProto `protobuf:"bytes,7,opt,name=doc,proto3,oneof"`
}

type NodeProto_DocArray struct {
	// a sub DocArray
	DocArray *DocListProto `protobuf:"bytes,8,opt,name=doc_array,json=docArray,proto3,oneof"`
}

type NodeProto_List struct {
	//any list
	List *ListOfAnyProto `protobuf:"bytes,9,opt,name=list,proto3,oneof"`
}

type NodeProto_Set struct {
	//any set
	Set *ListOfAnyProto `protobuf:"bytes,10,opt,name=set,proto3,oneof"`
}

type NodeProto_Tuple struct {
	//any tuple
	Tuple *ListOfAnyProto `protobuf:"bytes,11,opt,name=tuple,proto3,oneof"`
}

type NodeProto_Dict struct {
	// dictionary with string as keys
	Dict *DictOfAnyProto `protobuf:"bytes,12,opt,name=dict,proto3,oneof"`
}

func (*NodeProto_Text) isNodeProto_Content() {}

func (*NodeProto_Integer) isNodeProto_Content() {}

func (*NodeProto_Float) isNodeProto_Content() {}

func (*NodeProto_Boolean) isNodeProto_Content() {}

func (*NodeProto_Blob) isNodeProto_Content() {}

func (*NodeProto_Ndarray) isNodeProto_Content() {}

func (*NodeProto_Doc) isNodeProto_Content() {}

func (*NodeProto_DocArray) isNodeProto_Content() {}

func (*NodeProto_List) isNodeProto_Content() {}

func (*NodeProto_Set) isNodeProto_Content() {}

func (*NodeProto_Tuple) isNodeProto_Content() {}

func (*NodeProto_Dict) isNodeProto_Content() {}

type isNodeProto_DocarrayType interface {
	isNodeProto_DocarrayType()
}

type NodeProto_Type struct {
	Type string `protobuf:"bytes,13,opt,name=type,proto3,oneof"`
}

func (*NodeProto_Type) isNodeProto_DocarrayType() {}

//*
// Represents a Document
type DocProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]*NodeProto `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DocProto) Reset() {
	*x = DocProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docarray_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocProto) ProtoMessage() {}

func (x *DocProto) ProtoReflect() protoreflect.Message {
	mi := &file_docarray_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocProto.ProtoReflect.Descriptor instead.
func (*DocProto) Descriptor() ([]byte, []int) {
	return file_docarray_proto_rawDescGZIP(), []int{5}
}

func (x *DocProto) GetData() map[string]*NodeProto {
	if x != nil {
		return x.Data
	}
	return nil
}

type DictOfAnyProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]*NodeProto `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DictOfAnyProto) Reset() {
	*x = DictOfAnyProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docarray_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DictOfAnyProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictOfAnyProto) ProtoMessage() {}

func (x *DictOfAnyProto) ProtoReflect() protoreflect.Message {
	mi := &file_docarray_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictOfAnyProto.ProtoReflect.Descriptor instead.
func (*DictOfAnyProto) Descriptor() ([]byte, []int) {
	return file_docarray_proto_rawDescGZIP(), []int{6}
}

func (x *DictOfAnyProto) GetData() map[string]*NodeProto {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListOfAnyProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*NodeProto `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListOfAnyProto) Reset() {
	*x = ListOfAnyProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docarray_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOfAnyProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOfAnyProto) ProtoMessage() {}

func (x *ListOfAnyProto) ProtoReflect() protoreflect.Message {
	mi := &file_docarray_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOfAnyProto.ProtoReflect.Descriptor instead.
func (*ListOfAnyProto) Descriptor() ([]byte, []int) {
	return file_docarray_proto_rawDescGZIP(), []int{7}
}

func (x *ListOfAnyProto) GetData() []*NodeProto {
	if x != nil {
		return x.Data
	}
	return nil
}

type DocListProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docs []*DocProto `protobuf:"bytes,1,rep,name=docs,proto3" json:"docs,omitempty"` // a list of Documents
}

func (x *DocListProto) Reset() {
	*x = DocListProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docarray_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocListProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocListProto) ProtoMessage() {}

func (x *DocListProto) ProtoReflect() protoreflect.Message {
	mi := &file_docarray_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocListProto.ProtoReflect.Descriptor instead.
func (*DocListProto) Descriptor() ([]byte, []int) {
	return file_docarray_proto_rawDescGZIP(), []int{8}
}

func (x *DocListProto) GetDocs() []*DocProto {
	if x != nil {
		return x.Docs
	}
	return nil
}

type ListOfDocArrayProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*DocListProto `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListOfDocArrayProto) Reset() {
	*x = ListOfDocArrayProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docarray_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOfDocArrayProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOfDocArrayProto) ProtoMessage() {}

func (x *ListOfDocArrayProto) ProtoReflect() protoreflect.Message {
	mi := &file_docarray_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOfDocArrayProto.ProtoReflect.Descriptor instead.
func (*ListOfDocArrayProto) Descriptor() ([]byte, []int) {
	return file_docarray_proto_rawDescGZIP(), []int{9}
}

func (x *ListOfDocArrayProto) GetData() []*DocListProto {
	if x != nil {
		return x.Data
	}
	return nil
}

type DocVecProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TensorColumns  map[string]*NdArrayProto        `protobuf:"bytes,1,rep,name=tensor_columns,json=tensorColumns,proto3" json:"tensor_columns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`      // a dict of document columns
	DocColumns     map[string]*DocVecProto         `protobuf:"bytes,2,rep,name=doc_columns,json=docColumns,proto3" json:"doc_columns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`               // a dict of tensor columns
	DocsVecColumns map[string]*ListOfDocArrayProto `protobuf:"bytes,3,rep,name=docs_vec_columns,json=docsVecColumns,proto3" json:"docs_vec_columns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // a dict of document array columns
	AnyColumns     map[string]*ListOfAnyProto      `protobuf:"bytes,4,rep,name=any_columns,json=anyColumns,proto3" json:"any_columns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`               // a dict of any columns. Used for the rest of the data
}

func (x *DocVecProto) Reset() {
	*x = DocVecProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docarray_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocVecProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocVecProto) ProtoMessage() {}

func (x *DocVecProto) ProtoReflect() protoreflect.Message {
	mi := &file_docarray_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocVecProto.ProtoReflect.Descriptor instead.
func (*DocVecProto) Descriptor() ([]byte, []int) {
	return file_docarray_proto_rawDescGZIP(), []int{10}
}

func (x *DocVecProto) GetTensorColumns() map[string]*NdArrayProto {
	if x != nil {
		return x.TensorColumns
	}
	return nil
}

func (x *DocVecProto) GetDocColumns() map[string]*DocVecProto {
	if x != nil {
		return x.DocColumns
	}
	return nil
}

func (x *DocVecProto) GetDocsVecColumns() map[string]*ListOfDocArrayProto {
	if x != nil {
		return x.DocsVecColumns
	}
	return nil
}

func (x *DocVecProto) GetAnyColumns() map[string]*ListOfAnyProto {
	if x != nil {
		return x.AnyColumns
	}
	return nil
}

var File_docarray_proto protoreflect.FileDescriptor

var file_docarray_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x61, 0x72, 0x72, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x64, 0x6f, 0x63, 0x61, 0x72, 0x72, 0x61, 0x79, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a, 0x11, 0x44, 0x65, 0x6e, 0x73,
	0x65, 0x4e, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x7a, 0x0a, 0x0c, 0x4e, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x31, 0x0a, 0x05, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x63, 0x61, 0x72, 0x72, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x6e, 0x73,
	0x65, 0x4e, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x64,
	0x65, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x66, 0x0a,
	0x0c, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x28, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x44, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x44, 0x69, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x6f, 0x63,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x8c, 0x04, 0x0a, 0x09,
	0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x1a, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x05, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12,
	0x14, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x04, 0x62, 0x6c, 0x6f, 0x62, 0x12, 0x32, 0x0a, 0x07, 0x6e, 0x64, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x6f, 0x63, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x2e, 0x4e, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x07, 0x6e, 0x64, 0x61, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x64, 0x6f, 0x63,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x6f, 0x63, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x2e, 0x44, 0x6f, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x03, 0x64, 0x6f,
	0x63, 0x12, 0x35, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x6f, 0x63, 0x61, 0x72, 0x72, 0x61, 0x79, 0x2e,
	0x44, 0x6f, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x08,
	0x64, 0x6f, 0x63, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x63, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x41, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x63, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x41, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x63, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x41, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x05, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x69, 0x63, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x63, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x4f, 0x66, 0x41, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x04, 0x64, 0x69, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x64, 0x6f, 0x63,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x08, 0x44,
	0x6f, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x6f, 0x63, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x2e, 0x44, 0x6f, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x4c, 0x0a, 0x09, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6f, 0x63, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x96, 0x01, 0x0a, 0x0e, 0x44, 0x69, 0x63, 0x74,
	0x4f, 0x66, 0x41, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6f, 0x63, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x4f, 0x66, 0x41, 0x6e, 0x79, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x4c, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x64, 0x6f, 0x63, 0x61, 0x72, 0x72, 0x61, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x39, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x41, 0x6e, 0x79, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x64, 0x6f, 0x63, 0x61, 0x72, 0x72, 0x61, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x36, 0x0a, 0x0c, 0x44,
	0x6f, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x0a, 0x04, 0x64,
	0x6f, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x6f, 0x63, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x2e, 0x44, 0x6f, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x64,
	0x6f, 0x63, 0x73, 0x22, 0x41, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x44, 0x6f, 0x63,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x6f, 0x63, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x2e, 0x44, 0x6f, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xae, 0x05, 0x0a, 0x0b, 0x44, 0x6f, 0x63, 0x56, 0x65,
	0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4f, 0x0a, 0x0e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x64, 0x6f, 0x63, 0x61, 0x72, 0x72, 0x61, 0x79, 0x2e, 0x44, 0x6f, 0x63, 0x56, 0x65, 0x63,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64,
	0x6f, 0x63, 0x61, 0x72, 0x72, 0x61, 0x79, 0x2e, 0x44, 0x6f, 0x63, 0x56, 0x65, 0x63, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12,
	0x53, 0x0a, 0x10, 0x64, 0x6f, 0x63, 0x73, 0x5f, 0x76, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x6f, 0x63, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x2e, 0x44, 0x6f, 0x63, 0x56, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x6f, 0x63, 0x73, 0x56, 0x65, 0x63, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x73, 0x56, 0x65, 0x63, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x61, 0x6e, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x63, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x2e, 0x44, 0x6f, 0x63, 0x56, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x6e, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x1a, 0x58, 0x0a, 0x12,
	0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x6f, 0x63, 0x61, 0x72, 0x72, 0x61, 0x79, 0x2e, 0x4e,
	0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x0f, 0x44, 0x6f, 0x63, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x6f, 0x63,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x2e, 0x44, 0x6f, 0x63, 0x56, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x13,
	0x44, 0x6f, 0x63, 0x73, 0x56, 0x65, 0x63, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x6f, 0x63, 0x61, 0x72, 0x72, 0x61, 0x79, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x44, 0x6f, 0x63, 0x41, 0x72, 0x72, 0x61, 0x79, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57,
	0x0a, 0x0f, 0x41, 0x6e, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x63, 0x61, 0x72, 0x72, 0x61, 0x79, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x66, 0x41, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x19, 0x5a, 0x17, 0x6a, 0x72, 0x61, 0x66, 0x74,
	0x2f, 0x64, 0x6f, 0x63, 0x61, 0x72, 0x72, 0x61, 0x79, 0x2d, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_docarray_proto_rawDescOnce sync.Once
	file_docarray_proto_rawDescData = file_docarray_proto_rawDesc
)

func file_docarray_proto_rawDescGZIP() []byte {
	file_docarray_proto_rawDescOnce.Do(func() {
		file_docarray_proto_rawDescData = protoimpl.X.CompressGZIP(file_docarray_proto_rawDescData)
	})
	return file_docarray_proto_rawDescData
}

var file_docarray_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_docarray_proto_goTypes = []interface{}{
	(*DenseNdArrayProto)(nil),   // 0: docarray.DenseNdArrayProto
	(*NdArrayProto)(nil),        // 1: docarray.NdArrayProto
	(*KeyValuePair)(nil),        // 2: docarray.KeyValuePair
	(*GenericDictValue)(nil),    // 3: docarray.GenericDictValue
	(*NodeProto)(nil),           // 4: docarray.NodeProto
	(*DocProto)(nil),            // 5: docarray.DocProto
	(*DictOfAnyProto)(nil),      // 6: docarray.DictOfAnyProto
	(*ListOfAnyProto)(nil),      // 7: docarray.ListOfAnyProto
	(*DocListProto)(nil),        // 8: docarray.DocListProto
	(*ListOfDocArrayProto)(nil), // 9: docarray.ListOfDocArrayProto
	(*DocVecProto)(nil),         // 10: docarray.DocVecProto
	nil,                         // 11: docarray.DocProto.DataEntry
	nil,                         // 12: docarray.DictOfAnyProto.DataEntry
	nil,                         // 13: docarray.DocVecProto.TensorColumnsEntry
	nil,                         // 14: docarray.DocVecProto.DocColumnsEntry
	nil,                         // 15: docarray.DocVecProto.DocsVecColumnsEntry
	nil,                         // 16: docarray.DocVecProto.AnyColumnsEntry
	(*_struct.Struct)(nil),      // 17: google.protobuf.Struct
	(*_struct.Value)(nil),       // 18: google.protobuf.Value
}
var file_docarray_proto_depIdxs = []int32{
	0,  // 0: docarray.NdArrayProto.dense:type_name -> docarray.DenseNdArrayProto
	17, // 1: docarray.NdArrayProto.parameters:type_name -> google.protobuf.Struct
	18, // 2: docarray.KeyValuePair.key:type_name -> google.protobuf.Value
	18, // 3: docarray.KeyValuePair.value:type_name -> google.protobuf.Value
	2,  // 4: docarray.GenericDictValue.entries:type_name -> docarray.KeyValuePair
	1,  // 5: docarray.NodeProto.ndarray:type_name -> docarray.NdArrayProto
	5,  // 6: docarray.NodeProto.doc:type_name -> docarray.DocProto
	8,  // 7: docarray.NodeProto.doc_array:type_name -> docarray.DocListProto
	7,  // 8: docarray.NodeProto.list:type_name -> docarray.ListOfAnyProto
	7,  // 9: docarray.NodeProto.set:type_name -> docarray.ListOfAnyProto
	7,  // 10: docarray.NodeProto.tuple:type_name -> docarray.ListOfAnyProto
	6,  // 11: docarray.NodeProto.dict:type_name -> docarray.DictOfAnyProto
	11, // 12: docarray.DocProto.data:type_name -> docarray.DocProto.DataEntry
	12, // 13: docarray.DictOfAnyProto.data:type_name -> docarray.DictOfAnyProto.DataEntry
	4,  // 14: docarray.ListOfAnyProto.data:type_name -> docarray.NodeProto
	5,  // 15: docarray.DocListProto.docs:type_name -> docarray.DocProto
	8,  // 16: docarray.ListOfDocArrayProto.data:type_name -> docarray.DocListProto
	13, // 17: docarray.DocVecProto.tensor_columns:type_name -> docarray.DocVecProto.TensorColumnsEntry
	14, // 18: docarray.DocVecProto.doc_columns:type_name -> docarray.DocVecProto.DocColumnsEntry
	15, // 19: docarray.DocVecProto.docs_vec_columns:type_name -> docarray.DocVecProto.DocsVecColumnsEntry
	16, // 20: docarray.DocVecProto.any_columns:type_name -> docarray.DocVecProto.AnyColumnsEntry
	4,  // 21: docarray.DocProto.DataEntry.value:type_name -> docarray.NodeProto
	4,  // 22: docarray.DictOfAnyProto.DataEntry.value:type_name -> docarray.NodeProto
	1,  // 23: docarray.DocVecProto.TensorColumnsEntry.value:type_name -> docarray.NdArrayProto
	10, // 24: docarray.DocVecProto.DocColumnsEntry.value:type_name -> docarray.DocVecProto
	9,  // 25: docarray.DocVecProto.DocsVecColumnsEntry.value:type_name -> docarray.ListOfDocArrayProto
	7,  // 26: docarray.DocVecProto.AnyColumnsEntry.value:type_name -> docarray.ListOfAnyProto
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_docarray_proto_init() }
func file_docarray_proto_init() {
	if File_docarray_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_docarray_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DenseNdArrayProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docarray_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NdArrayProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docarray_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValuePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docarray_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericDictValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docarray_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docarray_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docarray_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DictOfAnyProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docarray_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOfAnyProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docarray_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocListProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docarray_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOfDocArrayProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docarray_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocVecProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_docarray_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*NodeProto_Text)(nil),
		(*NodeProto_Integer)(nil),
		(*NodeProto_Float)(nil),
		(*NodeProto_Boolean)(nil),
		(*NodeProto_Blob)(nil),
		(*NodeProto_Ndarray)(nil),
		(*NodeProto_Doc)(nil),
		(*NodeProto_DocArray)(nil),
		(*NodeProto_List)(nil),
		(*NodeProto_Set)(nil),
		(*NodeProto_Tuple)(nil),
		(*NodeProto_Dict)(nil),
		(*NodeProto_Type)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_docarray_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_docarray_proto_goTypes,
		DependencyIndexes: file_docarray_proto_depIdxs,
		MessageInfos:      file_docarray_proto_msgTypes,
	}.Build()
	File_docarray_proto = out.File
	file_docarray_proto_rawDesc = nil
	file_docarray_proto_goTypes = nil
	file_docarray_proto_depIdxs = nil
}
