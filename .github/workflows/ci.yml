name: CI

on:
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'README.md'

#on:
#  push:
#    branches-ignore:
#      - '**'  # temporally ignore all
jobs:
  commit-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v4

  lint-flake-8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Lint with flake8
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude .git,__pycache__,docs/source/conf.py,old,build,dist,tests/,jina/resources/
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude .git,__pycache__,docs/source/conf.py,old,build,dist,tests/,jina/resources/

  check-docstring:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - id: file_changes
        uses: Ana06/get-changed-files@v1.2
      - name: docstring check with darglint and pydocstyle
        run: ./scripts/docstrings_lint.sh
        env:
          CHANGED_FILES: ${{ steps.file_changes.outputs.added_modified }}

  check-black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - id: file_changes
        uses: Ana06/get-changed-files@v1.2
      - name: check black
        run: ./scripts/black.sh
        env:
          CHANGED_FILES: ${{ steps.file_changes.outputs.added_modified }}

  code-injection:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        if: ${{ !github.event.pull_request.head.repo.fork }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        if: ${{ !github.event.pull_request.head.repo.fork }}
        with:
          python-version: 3.7
      - name: Styling
        id: styling
        if: ${{ !github.event.pull_request.head.repo.fork }}
        run: |
          git config --local user.email "dev-bot@jina.ai"
          git config --local user.name "Jina Dev Bot"
          pip install ".[devel,black]"
          cd scripts && bash ./devbot.sh && cd -
          if [[ -z $(git status -s) ]]
          then
            echo "tree is clean"
          else
            git add -u
            git commit -m "style: fix overload and cli autocomplete"
            echo '::set-output name=IS_CHANGED::YES'
          fi
      - name: Push changes to head ref
        uses: ad-m/github-push-action@v0.6.0
        if: ${{ !github.event.pull_request.head.repo.fork }}
        with:
          github_token: ${{ secrets.JINA_DEV_BOT }}
          branch: ${{ github.head_ref }}
      - name: Fail this pipelint
        if: ${{ steps.styling.outputs.IS_CHANGED == 'YES' && !github.event.pull_request.head.repo.fork }}
        run: exit 1
  prep-testbed:
    runs-on: ubuntu-latest
    needs: [commit-lint, lint-flake-8, code-injection]
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: |
          sudo apt-get install jq
          echo "::set-output name=matrix::$(bash scripts/get-all-test-paths.sh)"
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  core-test:
    needs: prep-testbed
    runs-on: ubuntu-latest
    env:
      JINA_DAEMON_DOCKERFILE: DEVEL
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]
    steps:
      - uses: actions/checkout@v2
#        with:
#          submodules: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Prepare environment
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install ".[all]" --no-cache-dir
          jina
          export JINA_LOG_LEVEL="ERROR"
      - name: Test
        id: test
        run: |
          pytest --suppress-no-test-exit-code --force-flaky --min-passes 1 --max-runs 5 --cov=jina --cov-report=xml --timeout=360 -v -s tests/unit/peapods/runtimes/worker tests/unit/peapods/runtimes/head tests/unit/peapods/runtimes/request_handlers/ tests/unit/peapods/runtimes/gateway/grpc/test_grpc_gateway_runtime.py tests/unit/peapods/runtimes/gateway/graph/test_topology_graph.py tests/unit/peapods/test_networking.py tests/unit/peapods/pods/test_pods.py tests/unit/peapods/pods/test_scale.py tests/unit/peapods/pods/test_pod_factory.py tests/unit/peapods/peas/test_pea.py tests/unit/peapods/peas/container/test_container_pea.py tests/integration/runtimes/test_runtimes.py tests/integration/peas/test_pea.py tests/integration/peas/container/test_pea.py
          echo "flag it as jina for codeoverage"
          echo "::set-output name=codecov_flag::jina"
        timeout-minutes: 30
      - name: Check codecov file
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "coverage.xml"
      - name: Upload coverage from test to Codecov
        uses: codecov/codecov-action@v1
        if: steps.check_files.outputs.files_exists == 'true' && ${{ matrix.python-version }} == '3.7'
        with:
          file: coverage.xml
          name: ${{ matrix.test-path }}-codecov
          flags: ${{ steps.test.outputs.codecov_flag }}
          fail_ci_if_error: false

  # just for blocking the merge until all parallel core-test are successful
  success-all-test:
    runs-on: ubuntu-latest
    needs: [core-test, check-docstring, check-black, code-injection]
    if: always()
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - name: Check Failure
        if: env.WORKFLOW_CONCLUSION == 'failure'
        run: exit 1
      - name: Success
        if: ${{ success() }}
        run: echo "All Done"

