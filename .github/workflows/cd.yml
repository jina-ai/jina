name: CD

on:
  push:
    branches:
      - master

#on:
#  push:
#    branches-ignore:
#      - '**'  # temporally ignore all


jobs:
  update-doc:
    if: |
      !startsWith(github.event.head_commit.message, 'chore') &&
      !startsWith(github.event.head_commit.message, 'build: hotfix') &&
      !endsWith(github.event.head_commit.message, 'reformatted by jina-dev-bot')
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 100
      - run: |
          truncate --size=24KB README.md > README-trunc.md
      - uses: peter-evans/dockerhub-description@v2.3.0
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_DEVBOT_USER }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_DEVBOT_PWD }}
          DOCKERHUB_REPOSITORY: jinaai/jina
          readme-filepath: ./README-trunc.md
      - uses: actions/checkout@v2
        with:
          repository: jina-ai/api
          path: schema
          token: ${{ secrets.JINA_DEV_BOT }}
      - uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - run: |
          pip install .[daemon] --no-cache-dir
          JINA_VERSION=$(sed -n '/^__version__/p' ./jina/__init__.py | cut -d \' -f2)-master
          echo "JINA_VERSION=${JINA_VERSION}" >> $GITHUB_ENV
          pip install css-html-js-minify
          css-html-js-minify ./jina/resources/hub-builder-success
          cp ./jina/resources/hub-builder-success/index.html ./schema/hub
          cp ./jina/resources/hub-builder-success/script.min.js ./schema/hub
          cp ./jina/resources/hub-builder-success/style.min.css ./schema/hub
          cd schema
          mkdir -p schemas
          jina export-api --schema-path schemas/"$JINA_VERSION.json" schemas/master.json schemas/master --yaml-path "$JINA_VERSION.yml" master.yml --json-path "$JINA_VERSION.json" master.json master
          python -c "from daemon import _write_openapi_schema; _write_openapi_schema()"
          python ../scripts/get-gateway-openapi.py
          cd -
      - name: redoc-cli-jinad
        uses: seeebiii/redoc-cli-github-action@v10
        with:
          args: 'bundle schema/daemon.json -o jinad.html'
      - name: redoc-cli-gateway
        uses: seeebiii/redoc-cli-github-action@v10
        with:
          args: 'bundle schema/gateway.json -o rest.html'
      - name: push-to-api-repo
        run: |
          mkdir -p schema/daemon/
          cp jinad.html schema/daemon/master.html
          rm schema/daemon.json
          rm -rf schema/jinad
          mkdir -p schema/rest/
          cp rest.html schema/rest/master.html
          rm schema/gateway.json
          cd schema
          git config --local user.email "dev-bot@jina.ai"
          git config --local user.name "Jina Dev Bot"
          git add . && git commit -m "update ${{env.JINA_VERSION}} due to ${{github.event_name}} on ${{github.repository}}" && git push
      - name: Pre-release
        run: |
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
          pip install twine wheel
          ./scripts/release.sh
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
          JINA_SLACK_WEBHOOK: ${{ secrets.JINA_SLACK_WEBHOOK }}
      # Tell docs repo jina is going to release
      - name: send-repository-dispatch-event-to-docs
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.JINA_DEV_BOT }}
          repository: jina-ai/docs
          event-type: jina-merge-event

  update-docker:
    needs: update-doc
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        tag_stage: ["", "-devel", "-daemon"]
        tag_pyversion: ["-py37", "-py38", "-py39"]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true  # this job build devel image, devel image includes hub submodule
      - name: Set envs and versions
        run: |
          echo "VCS_REF=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
          echo "JINA_VERSION=$(sed -n '/^__version__/p' ./jina/__init__.py | cut -d \' -f2)-master" >> $GITHUB_ENV

          if [[ "${{ matrix.tag_pyversion }}" == "-py38" ]]; then
            echo "PY_VERSION=3.8" >> $GITHUB_ENV
          elif [[ "${{ matrix.tag_pyversion }}" == "-py39" ]]; then
            echo "PY_VERSION=3.9" >> $GITHUB_ENV
          else
            echo "PY_VERSION=3.7" >> $GITHUB_ENV
            echo "TAG_ALIAS=jinaai/jina:master${{ matrix.tag_stage }}" >> $GITHUB_ENV
          fi

          if [[ "${{ matrix.tag_stage }}" == "-daemon" ]]; then
            echo "BUILD_ARG=jina_daemon" >> $GITHUB_ENV
          elif [[ "${{ matrix.tag_stage }}" == "-devel" ]]; then
            echo "BUILD_ARG=jina_devel" >> $GITHUB_ENV
          else
            echo "BUILD_ARG=jina_base" >> $GITHUB_ENV
          fi
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_DEVBOT_USER }}
          password: ${{ secrets.DOCKERHUB_DEVBOT_TOKEN }}
      - run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfiles/debianx.Dockerfile
          platforms: linux/armhf,linux/amd64,linux/arm/v6
          push: true
          tags: jinaai/jina:master${{ matrix.tag_pyversion }}${{ matrix.tag_stage }}, ${{env.TAG_ALIAS}}
          build-args: BUILD_DATE, JINA_VERSION, VCS_REF, PY_VERSION
          target: ${{env.BUILD_ARG}}

  prep-testbed:
    needs: update-doc
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - run: |
          echo "PIP_TAG='[devel]'" >> $GITHUB_ENV
      - name: Upload to Github Docker Registry
        uses: elgohr/Publish-Docker-Github-Action@3.02
        with:
          name: jina-ai/jina/jina
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: docker.pkg.github.com
          dockerfile: Dockerfiles/pip.Dockerfile
          buildargs: PIP_TAG
          buildoptions: ${{ matrix.build_option }}
          tags: "test-pip"
      - id: set-matrix
        run: |
          sudo apt-get install jq
          echo "::set-output name=matrix::$(bash scripts/get-all-test-paths.sh tests)"
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  core-test:
    needs: prep-testbed
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]
        test-path: ${{fromJson(needs.prep-testbed.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Prepare enviroment
        run: |
          docker login docker.pkg.github.com -u $GITHUB_ACTOR -p $GITHUB_TOKEN
          docker pull docker.pkg.github.com/jina-ai/jina/jina:test-pip
          docker tag docker.pkg.github.com/jina-ai/jina/jina:test-pip jinaai/jina:test-pip
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install ".[cicd,test,daemon]" --no-cache-dir
          jina check
          export JINA_LOG_LEVEL="ERROR"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Test
        id: test
        run: |
          if [[ "${{ matrix.test-path }}" == "tests/distributed/test_against_external_daemon/" ]]; then
            docker build -f Dockerfiles/debianx.Dockerfile -t jinaai/jina:test-daemon .
            docker run --name jinad -v /var/run/docker.sock:/var/run/docker.sock --network=host -d jinaai/jina:test-daemon
            pytest --suppress-no-test-exit-code --force-flaky --min-passes 1 --max-runs 5 --cov=jina --cov-report=xml --timeout=300 -v -s --ignore-glob='tests/integration/hub_usage/dummyhub*' ${{ matrix.test-path }}
            docker rm -f jinad
          else
            SUB='daemon'
            if [[ "${{ matrix.test-path }}" == *"$SUB"* ]]; then
              pytest --suppress-no-test-exit-code --force-flaky --min-passes 1 --max-runs 5 --cov=daemon --cov-report=xml --timeout=300 -v -s --ignore-glob='tests/integration/hub_usage/dummyhub*' ${{ matrix.test-path }}
            else
              pytest --suppress-no-test-exit-code --force-flaky --min-passes 1 --max-runs 5 --cov=jina --cov-report=xml --timeout=300 -v -s --ignore-glob='tests/integration/hub_usage/dummyhub*' ${{ matrix.test-path }}
            fi
          fi
          SUB='daemon'
          if [[ "${{ matrix.test-path }}" == *"$SUB"* ]]; then
            echo "flag it as daemon for codeoverage"
            echo "::set-output name=codecov_flag::daemon"
          else
            echo "flag it as jina for codeoverage"
            echo "::set-output name=codecov_flag::jina"
          fi
        timeout-minutes: 15
        env:
          JINAHUB_USERNAME: ${{ secrets.JINAHUB_USERNAME }}
          JINAHUB_PASSWORD: ${{ secrets.JINAHUB_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Check file existence
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "coverage.xml"
      - name: Upload coverage from test to Codecov
        uses: codecov/codecov-action@v1
        if: steps.check_files.outputs.files_exists == 'true' && ${{ matrix.python-version }} == '3.7'
        with:
          file: coverage.xml
          name: ${{ matrix.test-path }}-codecov
          flags: ${{ steps.test.outputs.codecov_flag }}
          fail_ci_if_error: false
