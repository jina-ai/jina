# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import serializer as jina__pb2


class JinaControlRequestRPCStub(object):
    """*
    jina gRPC service for ControlRequests.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.process_control = channel.unary_unary(
                '/jina.JinaControlRequestRPC/process_control',
                request_serializer=jina__pb2.ControlRequestProto.SerializeToString,
                response_deserializer=jina__pb2.ControlRequestProto.FromString,
                )


class JinaControlRequestRPCServicer(object):
    """*
    jina gRPC service for ControlRequests.
    """

    def process_control(self, request, context):
        """Used for passing ControlRequests to the Executors
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JinaControlRequestRPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'process_control': grpc.unary_unary_rpc_method_handler(
                    servicer.process_control,
                    request_deserializer=jina__pb2.ControlRequestProto.FromString,
                    response_serializer=jina__pb2.ControlRequestProto.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'jina.JinaControlRequestRPC', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class JinaControlRequestRPC(object):
    """*
    jina gRPC service for ControlRequests.
    """

    @staticmethod
    def process_control(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jina.JinaControlRequestRPC/process_control',
            jina__pb2.ControlRequestProto.SerializeToString,
            jina__pb2.ControlRequestProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class JinaDataRequestRPCStub(object):
    """*
    jina gRPC service for DataRequests.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.process_data = channel.unary_unary(
                '/jina.JinaDataRequestRPC/process_data',
                request_serializer=jina__pb2.DataRequestListProto.SerializeToString,
                response_deserializer=jina__pb2.DataRequestProto.FromString,
                )


class JinaDataRequestRPCServicer(object):
    """*
    jina gRPC service for DataRequests.
    """

    def process_data(self, request, context):
        """Used for passing DataRequests to the Executors
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JinaDataRequestRPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'process_data': grpc.unary_unary_rpc_method_handler(
                    servicer.process_data,
                    request_deserializer=jina__pb2.DataRequestListProto.FromString,
                    response_serializer=jina__pb2.DataRequestProto.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'jina.JinaDataRequestRPC', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class JinaDataRequestRPC(object):
    """*
    jina gRPC service for DataRequests.
    """

    @staticmethod
    def process_data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jina.JinaDataRequestRPC/process_data',
            jina__pb2.DataRequestListProto.SerializeToString,
            jina__pb2.DataRequestProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class JinaSingleDataRequestRPCStub(object):
    """*
    jina gRPC service for DataRequests.
    This is used to send requests to Executors when a list of requests is not needed
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.process_single_data = channel.unary_unary(
                '/jina.JinaSingleDataRequestRPC/process_single_data',
                request_serializer=jina__pb2.DataRequestProto.SerializeToString,
                response_deserializer=jina__pb2.DataRequestProto.FromString,
                )


class JinaSingleDataRequestRPCServicer(object):
    """*
    jina gRPC service for DataRequests.
    This is used to send requests to Executors when a list of requests is not needed
    """

    def process_single_data(self, request, context):
        """Used for passing DataRequests to the Executors
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JinaSingleDataRequestRPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'process_single_data': grpc.unary_unary_rpc_method_handler(
                    servicer.process_single_data,
                    request_deserializer=jina__pb2.DataRequestProto.FromString,
                    response_serializer=jina__pb2.DataRequestProto.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'jina.JinaSingleDataRequestRPC', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class JinaSingleDataRequestRPC(object):
    """*
    jina gRPC service for DataRequests.
    This is used to send requests to Executors when a list of requests is not needed
    """

    @staticmethod
    def process_single_data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jina.JinaSingleDataRequestRPC/process_single_data',
            jina__pb2.DataRequestProto.SerializeToString,
            jina__pb2.DataRequestProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class JinaRPCStub(object):
    """*
    jina Gateway gRPC service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Call = channel.stream_stream(
                '/jina.JinaRPC/Call',
                request_serializer=jina__pb2.DataRequestProto.SerializeToString,
                response_deserializer=jina__pb2.DataRequestProto.FromString,
                )


class JinaRPCServicer(object):
    """*
    jina Gateway gRPC service.
    """

    def Call(self, request_iterator, context):
        """Pass in a Request and a filled Request with matches will be returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JinaRPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Call': grpc.stream_stream_rpc_method_handler(
                    servicer.Call,
                    request_deserializer=jina__pb2.DataRequestProto.FromString,
                    response_serializer=jina__pb2.DataRequestProto.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'jina.JinaRPC', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class JinaRPC(object):
    """*
    jina Gateway gRPC service.
    """

    @staticmethod
    def Call(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/jina.JinaRPC/Call',
            jina__pb2.DataRequestProto.SerializeToString,
            jina__pb2.DataRequestProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
