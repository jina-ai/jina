syntax = "proto3";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";
import "docarray.proto";

package jina;

/**
 * Represents a the route paths of this message
 */
message RouteProto {
    string pod = 1; // the name of the BasePod
    string pod_id = 2; // the id of the BasePod
    google.protobuf.Timestamp start_time = 3; // receiving time
    google.protobuf.Timestamp end_time = 4; // sending (out) time
    StatusProto status = 5; // the status of the execution
}

/**
 * Represents a Envelope, a part of the ``Message``.
 */
message EnvelopeProto {
    // unique id of the sender of the message
    string sender_id = 1;

    // unique id of the receiver of the message, only used in router-dealer pattern
    string receiver_id = 2;

    // unique id of the request
    string request_id = 3;

    // timeout in second until this message is dropped
    uint32 timeout = 4;

    /**
     * Represents a the version information
     */
    message VersionProto {
        string jina = 1; // jina's version
        string proto = 2; // protobuf's version
        string vcs = 3; // vcs's version
    }

    VersionProto version = 5; // version info

    string request_type = 6; // type of the request: DataRequest, ControlRequest

    bool check_version = 7; // check local Protobuf version on every Pod that this message flows to

    /**
     * Represents a config for the compression algorithm
     */
    message CompressConfigProto {
        string algorithm = 1;  // compress algorithm used for request

        uint64 min_bytes = 2; // the high watermark that triggers the message compression. message bigger than this HWM (in bytes) will be compressed by the algorithm.

        float min_ratio = 3; // the low watermark that enables the sending of a compressed message. compression rate (after_size/before_size) lower than this LWM will be considered as successeful compression, and will be sent. Otherwise, it will send the original message without compression

        google.protobuf.Struct parameters = 4; // other parameters that can be accepted by the algorithm
    }


    CompressConfigProto compression = 8; // compress configuration used for request

    StatusProto status = 9; // status info

    HeaderProto header = 10; // header contains meta info defined by the user, copied from Request, for lazy serialization
}

/**
 * Represents a Header.
 * - The header's content will be defined by the user request.
 * - It will be copied to the envelope.header
 * - In-flow operations will modify the envelope.header
 * - While returning, copy envelope.header back to request.header
 */
message HeaderProto {
    string exec_endpoint = 1;  // the endpoint specified by `@requests(on='/abc')`

    string target_peapod = 2; // if set, the request is targeted to certain peas/pods, regex strings

    bool no_propagate = 3; // if set, then this request is not propagate over the Flow topology

}


/**
 * Represents a Status
 */
message StatusProto {

    enum StatusCode {
        SUCCESS = 0; // success
        PENDING = 1; // there are pending messages, more messages are followed
        READY = 2; // ready to use
        ERROR = 3; // error
        ERROR_DUPLICATE = 4; // already a existing pod running
        ERROR_NOTALLOWED = 5; // not allowed to open pod remotely
        ERROR_CHAINED = 6; // chained from the previous error
    }

    // status code
    StatusCode code = 1;

    // error description of the very first exception
    string description = 2;

    message ExceptionProto {
        // the class name of the exception
        string name = 1;

        // the list of arguments given to the exception constructor.
        repeated string args = 2;

        // the exception traceback stacks
        repeated string stacks = 3;

        // the name of the executor bind to that peapod (if applicable)
        string executor = 4;


    }

    // the details of the error
    ExceptionProto exception = 3;
}

/**
 * Represents a Message
 */
message MessageProto {
    EnvelopeProto envelope = 1; // the envelope of the message, used internally in jina, dropped when returning to client
    RequestProto request = 2; // the request body
}

/**
 * Represents a list of Messages
 */
message MessageListProto {
    repeated MessageProto messages = 1; // messages in this lis
}

/**
 * Represents a Request
 */
message RequestProto {

    string request_id = 1; // the unique ID of this request. Multiple requests with the same ID will be gathered

    oneof body {
        ControlRequestProto control = 2; // a control request
        DataRequestProto data = 3; // a data request
    }

    /**
     * Represents a general data request
     */
    message DataRequestProto {
        repeated docarray.DocumentProto docs = 1; // a list of Documents to query
        repeated docarray.DocumentProto groundtruths = 2; // a list of groundtruth Document you want to evaluate it with
    }

    /**
     * Represents a control request used to control the BasePod
     */
    message ControlRequestProto {
        enum Command {
            TERMINATE = 0; // shutdown the BasePod
            STATUS = 1; // check the status of the BasePod
            SCALE = 2; // scale up/down a Pod
            ACTIVATE = 3; // used to add Peas to a Pod
            DEACTIVATE = 4; // used to remove Peas from a Pod
        }
        Command command = 1; // the control command

        /**
         * Represents an entity (like a Pea)
         */
        message RelatedEntity {
            string id = 1; // unique id of the entity, like the name of a pea
            string address = 2; // address of the entity, could be an IP address
            uint32 port = 3; // port this entity is listening on
        }

        repeated RelatedEntity relatedEntities = 2; // list of entities this ControlMessage is related to
    }

    HeaderProto header = 4; // header contains meta info defined by the user

    google.protobuf.Struct parameters = 5; // extra kwargs that will be used in executor

    repeated RouteProto routes = 6; // status info on every routes

    StatusProto status = 7; // status info


}


/**
 * jina gRPC service.
 */
service JinaRPC {
    // Pass in a Request and a filled Request with matches will be returned.
    rpc Call (stream RequestProto) returns (stream RequestProto) {
    }
}

/**
 * jina gRPC service for DataRequests.
 */
service JinaDataRequestRPC {
    // Pass in a Message, wrapping a DataRequest
    rpc Call (MessageListProto) returns (MessageProto) {
    }
}

