syntax = "proto3";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

package jina;

/**
 * Represents a (quantized) dense n-dim array
 */
message DenseNdArrayProto {
    // the actual array data, in bytes
    bytes buffer = 1;

    // the shape (dimensions) of the array
    repeated uint32 shape = 2;

    // the data type of the array
    string dtype = 3;
}

/**
 * Represents a general n-dim array, can be either dense or sparse
 */
message NdArrayProto {
    oneof content {
        DenseNdArrayProto dense = 1; // dense representation of the ndarray
        SparseNdArrayProto sparse = 2; // sparse representation of the ndarray
    }

    // the name of the ndarray class
    string cls_name = 3;

    google.protobuf.Struct parameters = 4;
}

/**
 * Represents a sparse ndarray
 */
message SparseNdArrayProto {
    // A 2-D int64 tensor of shape [N, ndims], which specifies the indices of the elements in the sparse tensor that contain nonzero values (elements are zero-indexed)
    DenseNdArrayProto indices = 1;

    // A 1-D tensor of any type and shape [N], which supplies the values for each element in indices.
    DenseNdArrayProto values = 2;

    // A 1-D int64 tensor of shape [ndims], which specifies the shape of the sparse tensor.
    repeated uint32 shape = 3;
}

/**
 * Represents the relevance model to `ref_id`
 */
message NamedScoreProto {
    float value = 1; // value
    string op_name = 2; // the name of the operator/score function
    string description = 3; // text description of the score
    repeated NamedScoreProto operands = 4; // the score can be nested
    string ref_id = 5; // the score is computed between doc `id` and `ref_id`
}


/**
 * Represents a Graph
 */
message GraphProto {
    NdArrayProto adjacency = 1; // adjacency list
    google.protobuf.Struct edge_features = 2; // Container structure to store edge features
    bool undirected = 3; //Flag indicating if the graph is to be interpreted as an undirected graph
}

/**
 * Represents a Document
 */
message DocumentProto {
    // A hexdigest that represents a unique document ID
    string id = 1;

    // the depth of the recursive chunk structure
    uint32 granularity = 14;

    // the width of the recursive match structure
    uint32 adjacency = 22;

    // the parent id from the previous granularity
    string parent_id = 16;

    oneof content {
        // the raw binary content of this document, which often represents the original document when comes into jina
        bytes buffer = 3;

        // the ndarray of the image/audio/video document
        NdArrayProto blob = 12;

        // a text document
        string text = 13;

        // Related information to be used when a Document represents a graph with its chunks as nodes
        GraphProto graph = 27;
    }

    // list of the sub-documents of this document (recursive structure)
    repeated DocumentProto chunks = 4;

    // The weight of this document
    float weight = 5;

    // the matched documents on the same level (recursive structure)
    repeated DocumentProto matches = 8;

    // a uri of the document could be: a local file path, a remote url starts with http or https or data URI scheme
    string uri = 9;

    // mime type of this document, for buffer content, this is required; for other contents, this can be guessed
    string mime_type = 10;

    // a structured data value, consisting of field which map to dynamically typed values.
    google.protobuf.Struct tags = 11;

    // the position of the doc, could be start and end index of a string; could be x,y (top, left) coordinate of an image crop; could be timestamp of an audio clip
    repeated float location = 17;

    // the offset of this doc in the previous granularity document
    float offset = 18;

    // the embedding `ndarray` of this document
    NdArrayProto embedding = 19;

    // Scores performed on the document, each element corresponds to a metric
    map<string, NamedScoreProto> scores = 28;

    // modality, an identifier to the modality this document belongs to. In the scope of multi/cross modal search
    string modality = 21;

    // Evaluations performed on the document, each element corresponds to a metric
    map<string, NamedScoreProto> evaluations = 29;
}

/**
 * Represents a the route paths of this message as perceived by the Gateway
 * start_time is set when the Gateway sends a message to a Pod
 * end_time is set when the Gateway receives a message from a Pod
 * thus end_time - start_time includes Executor computation, runtime overhead, serialization and network
 */
message RouteProto {
    string pod = 1; // the name of the BasePod
    google.protobuf.Timestamp start_time = 2; // time when the Gateway starts sending to the Pod
    google.protobuf.Timestamp end_time = 3; // time when the Gateway received it from the Pod
    StatusProto status = 4; // the status of the execution
}


/**
 * Represents a Header.
 * - The header's content will be defined by the user request.
 * - It will be copied to the envelope.header
 * - In-flow operations will modify the envelope.header
 * - While returning, copy envelope.header back to request.header
 */
message HeaderProto {
    string request_id = 1; // the unique ID of this request. Multiple requests with the same ID will be gathered

    StatusProto status = 2; // status info

    optional string exec_endpoint = 3;  // the endpoint specified by `@requests(on='/abc')`

    optional string target_peapod = 4; // if set, the request is targeted to certain peas/pods, regex strings

    optional uint32 timeout = 5; // epoch time in seconds after which the request should be dropped
}


/**
 * Represents a Status
 */
message StatusProto {

    enum StatusCode {
        SUCCESS = 0; // success
        PENDING = 1; // there are pending messages, more messages are followed
        READY = 2; // ready to use
        ERROR = 3; // error
        ERROR_DUPLICATE = 4; // already a existing pod running
        ERROR_NOTALLOWED = 5; // not allowed to open pod remotely
        ERROR_CHAINED = 6; // chained from the previous error
    }

    // status code
    StatusCode code = 1;

    // error description of the very first exception
    string description = 2;

    message ExceptionProto {
        // the class name of the exception
        string name = 1;

        // the list of arguments given to the exception constructor.
        repeated string args = 2;

        // the exception traceback stacks
        repeated string stacks = 3;

        // the name of the executor bind to that peapod (if applicable)
        string executor = 4;


    }

    // the details of the error
    ExceptionProto exception = 3;
}

message DocumentArrayProto {
    repeated DocumentProto docs = 1; // a list of Documents
}

/**
 * Represents an entity (like an ExecutorRuntime)
 */
message RelatedEntity {
    string id = 1; // unique id of the entity, like the name of a pea
    string address = 2; // address of the entity, could be an IP address, domain name etc, does not include port
    uint32 port = 3; // port this entity is listening on
    optional uint32 shard_id = 4; // the id of the shard it belongs to, if it is a shard
}


/**
 * Represents a ControlRequestProto
 */
message ControlRequestProto {

    HeaderProto header = 1; // header contains meta info defined by the user

    enum Command {
            STATUS = 0; // check the status of the BasePod
            ACTIVATE = 1; // used to add Peas to a Pod
            DEACTIVATE = 2; // used to remove Peas from a Pod
    }

    Command command = 2; // the control command

    repeated RelatedEntity relatedEntities = 3; // list of entities this ControlMessage is related to
}


/**
 * Represents a DataRequestProto
 */
message DataRequestProto {

    HeaderProto header = 1; // header contains meta info defined by the user

    google.protobuf.Struct parameters = 2; // extra kwargs that will be used in executor

    repeated RouteProto routes = 3; // status info on every routes

    message DataContentProto {
        repeated DocumentProto docs = 1; // the docs in this request
        repeated DocumentProto groundtruths = 2; // a list of groundtruth Documents
    }

    DataContentProto data = 4; // container for docs and groundtruths
}

/**
 * Represents a list of Messages
 * This should be replaced by streaming
 */
message DataRequestListProto {
    repeated DataRequestProto requests = 1; // requests in this list
}

/**
 * jina gRPC service for ControlRequests.
 */
service JinaControlRequestRPC {
    // Used for passing ControlRequests to the Executors
    rpc process_control (ControlRequestProto) returns (ControlRequestProto) {
    }
}

/**
 * jina gRPC service for DataRequests.
 */
service JinaDataRequestRPC {
    // Used for passing DataRequests to the Gateway and Executors
    rpc process_data (DataRequestListProto) returns (DataRequestProto) {
    }
}

/**
 * jina Gateway gRPC service.
 */
service JinaRPC {
    // Pass in a Request and a filled Request with matches will be returned.
    rpc Call (stream DataRequestProto) returns (stream DataRequestProto) {
    }
}

