syntax = "proto3";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

package jina;

/**
 * Represents a (quantized) dense n-dim array
 */
message DenseNdArrayProto {
    // the actual array data, in bytes
    bytes buffer = 1;

    // the shape (dimensions) of the array
    repeated uint32 shape = 2;

    // the data type of the array
    string dtype = 3;

    enum QuantizationMode {
        NONE = 0; // no quantization is performed, stored in the original ``dtype``
        FP16 = 1; // 2x smaller if dtype is set to FP32
        UINT8 = 2; // 4x smaller but lossy when dtype is FP32
    }

    // quantization mode
    QuantizationMode quantization = 4;

    float max_val = 5; // the max value of the ndarray
    float min_val = 6; // the min value of the ndarray
    float scale = 7; // the scale of the ndarray
    string original_dtype = 8; // the original dtype of the array
}

/**
 * Represents a general n-dim array, can be either dense or sparse
 */
message NdArrayProto {
    oneof content {
        DenseNdArrayProto dense = 1; // dense representation of the ndarray
        SparseNdArrayProto sparse = 2; // sparse representation of the ndarray
    }
}

/**
 * Represents a sparse ndarray
 */
message SparseNdArrayProto {
    // A 2-D int64 tensor of shape [N, ndims], which specifies the indices of the elements in the sparse tensor that contain nonzero values (elements are zero-indexed)
    DenseNdArrayProto indices = 1;

    // A 1-D tensor of any type and shape [N], which supplies the values for each element in indices.
    DenseNdArrayProto values = 2;

    // A 1-D int64 tensor of shape [ndims], which specifies the shape of the sparse tensor.
    repeated uint32 shape = 3;
}

/**
 * Represents the relevance model to `ref_id`
 */
message NamedScoreProto {
    float value = 1; // value
    string op_name = 2; // the name of the operator/score function
    string description = 3; // text description of the score
    repeated NamedScoreProto operands = 4; // the score can be nested
    string ref_id = 5; // the score is computed between doc `id` and `ref_id`
}

/**
 * Represents the mapping of score by keys
 */
message NamedScoreMappingProto {
    map<string, NamedScoreProto> values = 1;
}

/**
 * Represents a Graph
 */
message GraphProto {
    SparseNdArrayProto adjacency = 1; // adjacency list
    google.protobuf.Struct edge_features = 2; // Container structure to store edge features
    bool undirected = 3; //Flag indicating if the graph is to be interpreted as an undirected graph
}

/**
 * Represents a Document
 */
message DocumentProto {
    // A hexdigest that represents a unique document ID
    string id = 1;

    // A hexdigest that represents the hash of the content of the document
    string content_hash = 24;

    // the depth of the recursive chunk structure
    uint32 granularity = 14;

    // the width of the recursive match structure
    uint32 adjacency = 22;

    // the parent id from the previous granularity
    string parent_id = 16;

    oneof content {
        // the raw binary content of this document, which often represents the original document when comes into jina
        bytes buffer = 3;

        // the ndarray of the image/audio/video document
        NdArrayProto blob = 12;

        // a text document
        string text = 13;

        // a uri of the document could be: a local file path, a remote url starts with http or https or data URI scheme
        string uri = 9;

        // Related information to be used when a Document represents a graph with its chunks as nodes
        GraphProto graph = 27;
    }

    // list of the sub-documents of this document (recursive structure)
    repeated DocumentProto chunks = 4;

    // The weight of this document
    float weight = 5;

    // the matched documents on the same level (recursive structure)
    repeated DocumentProto matches = 8;

    // mime type of this document, for buffer content, this is required; for other contents, this can be guessed
    string mime_type = 10;

    // a structured data value, consisting of field which map to dynamically typed values.
    google.protobuf.Struct tags = 11;

    // the position of the doc, could be start and end index of a string; could be x,y (top, left) coordinate of an image crop; could be timestamp of an audio clip
    repeated uint32 location = 17;

    // the offset of this doc in the previous granularity document
    uint32 offset = 18;

    // the embedding `ndarray` of this document
    NdArrayProto embedding = 19;

    // Scores performed on the document, each element corresponds to a metric
    NamedScoreMappingProto scores = 28;

    // modality, an identifier to the modality this document belongs to. In the scope of multi/cross modal search
    string modality = 21;

    // Evaluations performed on the document, each element corresponds to a metric
    NamedScoreMappingProto evaluations = 29;
}

/**
 * Represents a the route paths of this message
 */
message RouteProto {
    string pod = 1; // the name of the BasePod
    string pod_id = 2; // the id of the BasePod
    google.protobuf.Timestamp start_time = 3; // receiving time
    google.protobuf.Timestamp end_time = 4; // sending (out) time
    StatusProto status = 5; // the status of the execution
}

/**
 * Represents a Envelope, a part of the ``Message``.
 */
message EnvelopeProto {
    // unique id of the sender of the message
    string sender_id = 1;

    // unique id of the receiver of the message, only used in router-dealer pattern
    string receiver_id = 2;

    // unique id of the request
    string request_id = 3;

    // timeout in second until this message is dropped
    uint32 timeout = 4;

    /**
     * Represents a the version information
     */
    message VersionProto {
        string jina = 1; // jina's version
        string proto = 2; // protobuf's version
        string vcs = 3; // vcs's version
    }

    VersionProto version = 6; // version info

    string request_type = 7; // type of the request: DataRequest, ControlRequest

    bool check_version = 8; // check local Protobuf version on every Pod that this message flows to

    /**
     * Represents a config for the compression algorithm
     */
    message CompressConfigProto {
        string algorithm = 1;  // compress algorithm used for request

        uint64 min_bytes = 2; // the high watermark that triggers the message compression. message bigger than this HWM (in bytes) will be compressed by the algorithm.

        float min_ratio = 3; // the low watermark that enables the sending of a compressed message. compression rate (after_size/before_size) lower than this LWM will be considered as successeful compression, and will be sent. Otherwise, it will send the original message without compression

        google.protobuf.Struct parameters = 4; // other parameters that can be accepted by the algorithm
    }


    CompressConfigProto compression = 9; // compress configuration used for request

    repeated RouteProto routes = 10; // status info on every routes

    StatusProto status = 11; // status info

    HeaderProto header = 12; // header contains meta info defined by the user, copied from Request, for lazy serialization

}

/**
 * Represents a Header.
 * - The header's content will be defined by the user request.
 * - It will be copied to the envelope.header
 * - In-flow operations will modify the envelope.header
 * - While returning, copy envelope.header back to request.header
 */
message HeaderProto {
    string exec_endpoint = 1;  // the endpoint specified by `@requests(on='/abc')`

    string target_peapod = 2; // if set, the request is targeted to certain peas/pods, regex strings

    bool no_propagate = 3; // if set, then this request is not propagate over the Flow topology

}


/**
 * Represents a Status
 */
message StatusProto {

    enum StatusCode {
        SUCCESS = 0; // success
        PENDING = 1; // there are pending messages, more messages are followed
        READY = 2; // ready to use
        ERROR = 3; // error
        ERROR_DUPLICATE = 4; // already a existing pod running
        ERROR_NOTALLOWED = 5; // not allowed to open pod remotely
        ERROR_CHAINED = 6; // chained from the previous error
    }

    // status code
    StatusCode code = 1;

    // error description of the very first exception
    string description = 2;

    message ExceptionProto {
        // the class name of the exception
        string name = 1;

        // the list of arguments given to the exception constructor.
        repeated string args = 2;

        // the exception traceback stacks
        repeated string stacks = 3;

        // the name of the executor bind to that peapod (if applicable)
        string executor = 4;


    }

    // the details of the error
    ExceptionProto exception = 3;
}

/**
 * Represents a Message
 */
message MessageProto {
    EnvelopeProto envelope = 1; // the envelope of the message, used internally in jina, dropped when returning to client
    RequestProto request = 2; // the request body
}

message DocumentArrayProto {
    repeated DocumentProto docs = 1; // a list of Documents
}

/**
 * Represents a Request
 */
message RequestProto {

    string request_id = 1; // the unique ID of this request. Multiple requests with the same ID will be gathered

    oneof body {
        ControlRequestProto control = 2; // a control request
        DataRequestProto data = 3; // a data request
    }

    /**
     * Represents a general data request
     */
    message DataRequestProto {
        repeated DocumentProto docs = 1; // a list of Documents to query
        repeated DocumentProto groundtruths = 2; // a list of groundtruth Document you want to evaluate it with
    }

    /**
     * Represents a control request used to control the BasePod
     */
    message ControlRequestProto {
        enum Command {
            TERMINATE = 0; // shutdown the BasePod
            STATUS = 1; // check the status of the BasePod
            IDLE = 2; // used in ROUTER-DEALER pattern, tells the router that the dealer is idle
            CANCEL = 3; // used in ROUTER-DEALER pattern, tells the router that the dealer is busy (or closed)
            SCALE = 4; // scale up/down a Pod
            ACTIVATE = 5; // used in ROUTER-DEALER pattern, Indicate a Pea that it can activate itself and send the IDLE command to their router
            DEACTIVATE = 6; // used in ROUTER-DEALER pattern, Indicate a Pea that it can deactivate itself and send the CANCEL command to their router
        }
        Command command = 1; // the control command
    }

    HeaderProto header = 4; // header contains meta info defined by the user

    google.protobuf.Struct parameters = 5; // extra kwargs that will be used in executor

    repeated RouteProto routes = 6; // status info on every routes

    StatusProto status = 7; // status info


}


/**
 * jina gRPC service.
 */
service JinaRPC {
    // Pass in a Request and a filled Request with matches will be returned.
    rpc Call (stream RequestProto) returns (stream RequestProto) {
    }
}
