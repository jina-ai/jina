name: Release CD

on:
  push:
    tags:
      - "v*"  # push to version tags trigger the build

#on:
#  push:
#    branches-ignore:
#      - '**'  # temporally disable this action

jobs:
  update-schema:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/checkout@v2
        with:
          repository: jina-ai/api
          path: schema
          token: ${{ secrets.JINA_DEV_BOT }}
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - run: |
          JINA_VERSION=${GITHUB_REF/refs\/tags\/v/}
          JINA_MINOR_VERSION=${JINA_VERSION%.*}
          V_JINA_VERSION=${GITHUB_REF/refs\/tags\//}
          echo "JINA_VERSION=${JINA_VERSION}" >> $GITHUB_ENV
          echo "V_JINA_VERSION=${V_JINA_VERSION}" >> $GITHUB_ENV
          echo "JINA_MINOR_VERSION=${JINA_MINOR_VERSION}" >> $GITHUB_ENV
          pip install .[daemon] --no-cache-dir
          cd schema
          mkdir -p schemas
          jina export-api --schema-path schemas/"$JINA_VERSION.json" schemas/latest.json schemas/latest --yaml-path "$JINA_VERSION.yml" latest.yml --json-path "$JINA_VERSION.json" latest.json latest
          python ../scripts/get-openapi-schemas.py
          npm install --prefix ~ snippet-enricher-cli
          ~/node_modules/.bin/snippet-enricher-cli --input=gateway.json --targets=shell_curl > gateway-with-code.json
          ~/node_modules/.bin/snippet-enricher-cli --input=daemon.json --targets=shell_curl > daemon-with-code.json
          cd -
      - name: redoc-cli-jinad
        uses: seeebiii/redoc-cli-github-action@v10
        with:
          args: 'bundle schema/daemon-with-code.json -o jinad.html'
      - name: redoc-cli-gateway
        uses: seeebiii/redoc-cli-github-action@v10
        with:
          args: 'bundle schema/gateway-with-code.json -o rest.html'
      - name: push-to-api-repo
        run: |
          mkdir -p schema/daemon/
          cp jinad.html schema/daemon/index.html
          cp jinad.html schema/daemon/${{env.JINA_VERSION}}.html
          cp schema/daemon.json schema/daemon/${{env.JINA_VERSION}}.json
          cp schema/daemon.json schema/daemon/latest.json
          rm schema/daemon.json schema/daemon-with-code.json
          rm -rf schema/jinad
          mkdir -p schema/rest/
          cp rest.html schema/rest/index.html
          cp rest.html schema/rest/${{env.JINA_VERSION}}.html
          cp rest.html schema/rest/latest.html
          cp schema/gateway.json schema/rest/${{env.JINA_VERSION}}.json
          cp schema/gateway.json schema/rest/latest.json
          rm schema/gateway.json schema/gateway-with-code.json
          cd schema
          git config --local user.email "dev-bot@jina.ai"
          git config --local user.name "Jina Dev Bot"
          git add . && git commit -m "update ${{env.JINA_VERSION}} due to ${{github.event_name}} on ${{github.repository}}" && git push

  deploy-jinad-cloud-jina-ai:
    runs-on: ubuntu-latest
    steps:
      - uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Destroy previous & Deploy new JinaD
          repo: jina-ai/jina-terraform
          token: ${{ secrets.JINA_DEV_BOT }}
          ref: refs/heads/main
          inputs: '{ "TFID": "cloud.jina.ai", "instances": "{ \"cloud.jina.ai\": { \"type\": \"t2.micro\", \"disk\" = { \"type\" = \"gp2\", \"size\" = 20 }, \"pip\": [], \"command\": \"sudo echo Hello from cloud.jina.ai\"} }", "region": "us-east-1", "cloudflare_record_name": "cloud" }'

  update-doc:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: push-to-gh-pages-branch
        run: |
          git config --local user.email "dev-bot@jina.ai"
          git config --local user.name "Jina Dev Bot"
          git checkout gh-pages
          git merge origin/master
          pip install .[devel]
          cd docs
          pip install -r requirements.txt
          docker run --rm \
            -v $(pwd)/proto:/out \
            -v $(pwd)/../jina/proto:/protos \
            pseudomuto/protoc-gen-doc --doc_opt=markdown,docs.md
          make dirhtml
          cd ./_build/dirhtml/
          cp -r ./ ../../
          cd -
          rm -rf ./_build/dirhtml/
          ls -la
          touch .nojekyll
          cp 404/index.html 404.html
          echo docs.jina.ai > CNAME
          git add api cli proto
          git add . && git commit -m "chore(docs): update docs due to ${{github.event_name}} on ${{github.repository}}"
          git status
          git push origin gh-pages

  update-docker:
    needs: update-doc
    runs-on: ubuntu-latest
    steps:
      - uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Manual Docker Build
          token: ${{ secrets.JINA_DEV_BOT }}
          inputs: '{ "release_token": "${{ env.release_token }}", "triggered_by": "TAG"}'
        env:
          release_token: ${{ secrets.JINA_CORE_RELEASE_TOKEN }}

  create-release:
    needs: update-doc
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: 'master'
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - run: |
          python scripts/get-last-release-note.py
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: ðŸ’« Patch ${{ github.ref }}
          body_path: 'tmp.md'
          draft: false
          prerelease: false
