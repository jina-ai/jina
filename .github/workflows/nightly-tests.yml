name: CI

on:
  workflow_dispatch:
  pull_request: # this will be replaced with a cronjob

jobs:
  prep-testbed:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: |
          sudo apt-get install jq
          echo "::set-output name=windows::$(bash scripts/get-all-test-paths.sh windows)"
    outputs:
      windows: ${{ steps.set-matrix.outputs.windows }}

  # windows-test:
  #   needs: prep-testbed
  #   runs-on: windows-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       python-version: [3.7]
  #       test-path: ${{fromJson(needs.prep-testbed.outputs.windows)}}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         architecture: x64
  #     - name: Prepare enviroment
  #       run: |
  #         docker build -f Dockerfiles/pip.Dockerfile -t jinaai/jina:test-pip .
  #         python -m pip install --upgrade pip
  #         python -m pip install wheel
  #         pip install ".[all]" --no-cache-dir
  #         $env:PYTHONIOENCODING='utf-8'
  #         jina
  #         $env:JINA_LOG_LEVEL='ERROR'
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Test
  #       id: test
  #       run: |
  #         $env:PYTHONIOENCODING='utf-8'
  #         pytest --suppress-no-test-exit-code --force-flaky --min-passes 1 --max-runs 5 --timeout=360 -v -s --ignore-glob='tests/integration/hub_usage/dummyhub*' ${{ matrix.test-path }}
  #       timeout-minutes: 20
  #       env:
  #         JINAHUB_USERNAME: ${{ secrets.JINAHUB_USERNAME }}
  #         JINAHUB_PASSWORD: ${{ secrets.JINAHUB_PASSWORD }}
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  dummy-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]
        test-path: ${{fromJson(needs.prep-testbed.outputs.windows)}}
    steps:
      - uses: actions/checkout@v2
      - run: |
          echo ${{ matrix.test-path }}
          if [[ "${{ matrix.test-path }}" =~ ^tests/unit/peapods/* ]]; then
            echo "::set-output name=status::failure"
          else
            echo "::set-output name=status::success"
          fi

  success-all-test:
    needs: [prep-testbed, dummy-tests]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - run: |
          echo ${{ needs.dummy-tests.outputs.status }}
      - name: Check Failure
        if: env.WORKFLOW_CONCLUSION == 'failure'
        run: exit 1
      - name: Success
        if: ${{ success() }}
        run: echo "All Done"
