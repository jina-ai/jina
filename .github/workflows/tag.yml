name: Release CD

on:
  push:
    tags:
      - "v*"  # push to version tags trigger the build


jobs:
  update-schema:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/checkout@v2
        with:
          repository: jina-ai/api
          path: schema
          token: ${{ secrets.JINA_DEV_BOT }}
      - uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - run: |
          JINA_VERSION=${GITHUB_REF/refs\/tags\/v/}
          JINA_MINOR_VERSION=${JINA_VERSION%.*}
          V_JINA_VERSION=${GITHUB_REF/refs\/tags\//}
          echo "JINA_VERSION=${JINA_VERSION}" >> $GITHUB_ENV
          echo "V_JINA_VERSION=${V_JINA_VERSION}" >> $GITHUB_ENV
          echo "JINA_MINOR_VERSION=${JINA_MINOR_VERSION}" >> $GITHUB_ENV
          pip install .[daemon] --no-cache-dir
          cd schema
          mkdir -p schemas
          jina export-api --schema-path schemas/"$JINA_VERSION.json" schemas/latest.json schemas/latest --yaml-path "$JINA_VERSION.yml" latest.yml --json-path "$JINA_VERSION.json" latest.json latest
          python -c "from daemon import _write_openapi_schema; _write_openapi_schema()"
          python ../scripts/get-gateway-openapi.py
          cd -
      - name: redoc-cli-jinad
        uses: seeebiii/redoc-cli-github-action@v10
        with:
          args: 'bundle schema/daemon.json -o jinad.html'
      - name: redoc-cli-gateway
        uses: seeebiii/redoc-cli-github-action@v10
        with:
          args: 'bundle schema/gateway.json -o rest.html'
      - name: push-to-api-repo
        run: |
          mkdir -p schema/daemon/
          cp jinad.html schema/daemon/index.html
          cp jinad.html schema/daemon/${{env.JINA_VERSION}}.html
          rm schema/daemon.json
          rm -rf schema/jinad
          mkdir -p schema/rest/
          cp rest.html schema/rest/index.html
          cp rest.html schema/rest/${{env.JINA_VERSION}}.html
          rm schema/gateway.json
          cd schema
          git config --local user.email "dev-bot@jina.ai"
          git config --local user.name "Jina Dev Bot"
          git add . && git commit -m "update ${{env.JINA_VERSION}} due to ${{github.event_name}} on ${{github.repository}}" && git push

  update-dashboard-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          JINA_VERSION=${GITHUB_REF/refs\/tags\/v/}
          echo "JINA_VERSION=${JINA_VERSION}" >> $GITHUB_ENV
      - name: Dashboard version update
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Sync version with Jina core
          repo: jina-ai/dashboard
          token: ${{ secrets.JINA_DEV_BOT }}
          ref: refs/heads/master
          inputs: '{ "version": "${{ env.JINA_VERSION }}" }'

  deploy-jinad-cloud-jina-ai:
    runs-on: ubuntu-latest
    steps:
      - uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Destroy previous & Deploy new JinaD
          repo: jina-ai/jina-terraform
          token: ${{ secrets.JINA_DEV_BOT }}
          ref: refs/heads/main
          inputs: '{ "TFID": "cloud.jina.ai", "instance_type": "t2.micro", "region": "us-east-1", "cloudflare_record_name": "cloud" }'

  update-doc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - id: get_version
        run: |
          echo ::set-output name=JINA_VERSION::${GITHUB_REF/refs\/tags\/v/}
          echo ::set-output name=V_JINA_VERSION::${GITHUB_REF/refs\/tags\//}
      # Tell docs repo jina is going to release
      - name: send-repository-dispatch-event-to-docs
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.JINA_DEV_BOT }}
          repository: jina-ai/docs
          event-type: jina-release-event

  update-docker:
    needs: update-doc
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tag_stage: ["", "-devel", "-daemon"]
        tag_pyversion: ["-py37", "-py38", "-py39"]
    steps:
      - uses: actions/checkout@v2
      - name: Set envs and versions
        run: |
          echo "VCS_REF=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
          echo "JINA_VERSION=${GITHUB_REF/refs\/tags\/v/}" >> $GITHUB_ENV
          echo "V_JINA_VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
          JINA_VERSION=${GITHUB_REF/refs\/tags\/v/}
          JINA_MINOR_VERSION=${JINA_VERSION%.*}
          echo "JINA_MINOR_VERSION=${JINA_MINOR_VERSION}" >> $GITHUB_ENV

          if [[ "${{ matrix.tag_pyversion }}" == "-py38" ]]; then
            echo "PY_VERSION=3.8" >> $GITHUB_ENV
          elif [[ "${{ matrix.tag_pyversion }}" == "-py39" ]]; then
            echo "PY_VERSION=3.9" >> $GITHUB_ENV
          else
            echo "PY_VERSION=3.7" >> $GITHUB_ENV
            echo "TAG_ALIAS=jinaai/jina:latest${{ matrix.tag_stage }}, jinaai/jina:$JINA_VERSION${{ matrix.tag_stage }}, jinaai/jina:$JINA_MINOR_VERSION${{ matrix.tag_stage }}" >> $GITHUB_ENV
          fi

          if [[ "${{ matrix.tag_stage }}" == "-daemon" ]]; then
            echo "BUILD_ARG=jina_daemon" >> $GITHUB_ENV
          elif [[ "${{ matrix.tag_stage }}" == "-devel" ]]; then
            echo "BUILD_ARG=jina_devel" >> $GITHUB_ENV
          else
            echo "BUILD_ARG=jina_base" >> $GITHUB_ENV
          fi
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_DEVBOT_USER }}
          password: ${{ secrets.DOCKERHUB_DEVBOT_TOKEN }}
      - run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfiles/debianx.Dockerfile
          platforms: linux/armhf,linux/amd64,linux/arm/v6
          push: true
          tags: jinaai/jina:latest${{ matrix.tag_pyversion }}${{ matrix.tag_stage }}, jinaai/jina:${{env.JINA_VERSION}}${{ matrix.tag_pyversion }}${{ matrix.tag_stage }}, jinaai/jina:${{env.JINA_MINOR_VERSION}}${{ matrix.tag_pyversion }}${{ matrix.tag_stage }}, ${{env.TAG_ALIAS}}
          build-args: BUILD_DATE, JINA_VERSION, VCS_REF, PY_VERSION
          target: ${{env.BUILD_ARG}}

  create-release:
    needs: update-doc
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: 'master'
      - uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - run: |
          python scripts/get-last-release-note.py
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: ðŸ’« Patch ${{ github.ref }}
          body_path: 'tmp.md'
          draft: false
          prerelease: false