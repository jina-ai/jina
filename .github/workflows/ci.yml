name: CI

on:
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'README.md'

#on:
#  push:
#    branches-ignore:
#      - '**'  # temporally ignore all
jobs:
  commit-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v4

  lint-flake-8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Lint with flake8
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude .git,__pycache__,docs/source/conf.py,old,build,dist,tests/,jina/resources/
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude .git,__pycache__,docs/source/conf.py,old,build,dist,tests/,jina/resources/

  check-docstring:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - id: file_changes
        uses: Ana06/get-changed-files@v1.2
      - name: docstring check with darglint and pydocstyle
        run: ./scripts/docstrings_lint.sh
        env:
          CHANGED_FILES: ${{ steps.file_changes.outputs.added_modified }}

  check-black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - id: file_changes
        uses: Ana06/get-changed-files@v1.2
      - name: check black
        run: ./scripts/black.sh
        env:
          CHANGED_FILES: ${{ steps.file_changes.outputs.added_modified }}

  code-injection:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        if: ${{ !github.event.pull_request.head.repo.fork }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        if: ${{ !github.event.pull_request.head.repo.fork }}
        with:
          python-version: 3.7
      - name: Styling
        id: styling
        if: ${{ !github.event.pull_request.head.repo.fork }}
        run: |
          git config --local user.email "dev-bot@jina.ai"
          git config --local user.name "Jina Dev Bot"
          pip install ".[devel,black]"
          cd scripts && bash ./devbot.sh && cd -
          if [[ -z $(git status -s) ]]
          then
            echo "tree is clean"
          else
            git add -u
            git commit -m "style: fix overload and cli autocomplete"
            echo '::set-output name=IS_CHANGED::YES'
          fi
      - name: Push changes to head ref
        uses: ad-m/github-push-action@v0.6.0
        if: ${{ !github.event.pull_request.head.repo.fork }}
        with:
          github_token: ${{ secrets.JINA_DEV_BOT }}
          branch: ${{ github.head_ref }}
      - name: Fail this pipelint
        if: ${{ steps.styling.outputs.IS_CHANGED == 'YES' && !github.event.pull_request.head.repo.fork }}
        run: exit 1

  docker-image-test:
    needs: [commit-lint, code-injection]
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    strategy:
      fail-fast: false
      matrix:
        test-arch: ["linux/amd64", "linux/arm64"]
    steps:
#      - name: Cancel Previous Runs
#        uses: styfle/cancel-workflow-action@0.9.0
#        with:
#          access_token: ${{ github.token }}
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
          driver-opts: network=host
      - run: |
          docker run --privileged --rm tonistiigi/binfmt --uninstall qemu-aarch64
          docker run --rm --privileged tonistiigi/binfmt --install all
      - name: Build and test
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfiles/debianx.Dockerfile
          platforms: ${{ matrix.test-arch }}
          push: true
          tags: localhost:5000/jina/multiarch:latest
          target: jina
      - run: |
          docker run --platform ${{ matrix.test-arch }} localhost:5000/jina/multiarch:latest -v

  hub-test:
    runs-on: ubuntu-latest
    needs: [commit-lint, lint-flake-8, code-injection]
    if: ${{ !github.event.pull_request.head.repo.fork }}
    steps:
#      - name: Cancel Previous Runs
#        uses: styfle/cancel-workflow-action@0.9.0
#        with:
#          access_token: ${{ github.token }}
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Test hubapp with hubpods
        run: |
          ./tests/jinahub/test_integration.sh
        timeout-minutes: 30
        env:
          JINAHUB_USERNAME: ${{ secrets.JINAHUB_USERNAME }}
          JINAHUB_PASSWORD: ${{ secrets.JINAHUB_PASSWORD }}

  k8s-test:
    needs: [commit-lint, lint-flake-8, code-injection]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Prepare enviroment
        run: |
          docker build -f Dockerfiles/pip.Dockerfile -t jinaai/jina:test-pip .
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install ".[all]" --no-cache-dir
          jina
          export JINA_LOG_LEVEL="ERROR"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Test k8s
        run: |
          curl --proto '=https' --tlsv1.2 -sSfL https://run.linkerd.io/install | sh
          pytest -v -s --suppress-no-test-exit-code --force-flaky --min-passes 1 --max-runs 5 --cov=jina --cov-report=xml ./tests/k8s/test_*.py
        timeout-minutes: 30
      - name: Check codecov file
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "coverage.xml"
      - name: Upload coverage from test to Codecov
        uses: codecov/codecov-action@v2
        if: steps.check_files.outputs.files_exists == 'true' && ${{ matrix.python-version }} == '3.7'
        with:
          file: coverage.xml
          name: ${{ matrix.test-path }}-codecov
          flags: ${{ steps.test.outputs.codecov_flag }}
          fail_ci_if_error: false

  docker-compose-test:
    needs: [commit-lint, lint-flake-8, code-injection]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Prepare enviroment
        run: |
          docker build -f Dockerfiles/pip.Dockerfile -t jinaai/jina:test-pip .
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install ".[all]" --no-cache-dir
          jina
          export JINA_LOG_LEVEL="ERROR"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Test docker compose
        run: |
          pytest -v -s --suppress-no-test-exit-code --force-flaky --min-passes 1 --max-runs 5 --cov=jina --cov-report=xml ./tests/docker_compose/test_*.py
        timeout-minutes: 30
      - name: Check codecov file
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "coverage.xml"
      - name: Upload coverage from test to Codecov
        uses: codecov/codecov-action@v2
        if: steps.check_files.outputs.files_exists == 'true' && ${{ matrix.python-version }} == '3.7'
        with:
          file: coverage.xml
          name: ${{ matrix.test-path }}-codecov
          flags: ${{ steps.test.outputs.codecov_flag }}
          fail_ci_if_error: false

  prep-testbed:
    runs-on: ubuntu-latest
    needs: [commit-lint, lint-flake-8, code-injection]
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: |
          sudo apt-get install jq
          echo "::set-output name=matrix::$(bash scripts/get-all-test-paths.sh)"
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  core-test:
    needs: prep-testbed
    runs-on: ubuntu-latest
    env:
      JINA_DAEMON_DOCKERFILE: DEVEL
      JINA_RANDOM_PORT_MIN: 16384
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]
        test-path: ${{fromJson(needs.prep-testbed.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Prepare environment
        run: |
          docker build -f Dockerfiles/pip.Dockerfile -t jinaai/jina:test-pip .
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install ".[all]" --no-cache-dir
          jina
          export JINA_LOG_LEVEL="ERROR"
      - name: Test
        id: test
        run: |
          if [[ "${{ matrix.test-path }}" =~ ^tests/distributed/* || "${{ matrix.test-path }}" =~ ^tests/daemon/* ]]; then
            # Build daemon for all daemon/distributed tests
            docker build -f Dockerfiles/debianx.Dockerfile --build-arg PIP_TAG=daemon -t jinaai/jina:test-daemon .
            declare -a distributed_tests=("tests/distributed/test_topologies/" "tests/distributed/test_topologies_docker/" "tests/distributed/test_workspaces/" "tests/distributed/test_dir_structures/" "tests/distributed/test_scale_remote/" "tests/distributed/test_scale_remote_executors/" "tests/distributed/test_env_vars/" "tests/distributed/test_remote_pods/" "tests/distributed/test_remote_flows/" "tests/distributed/test_remote_deployments/")
            if [[ " ${distributed_tests[*]} " =~ "${{ matrix.test-path }}" ]]; then
              docker run --add-host=host.docker.internal:host-gateway --name jinad --env JINA_DAEMON_BUILD=DEVEL --env JINA_RANDOM_PORT_MIN=12500 --env JINA_RANDOM_PORT_MAX=16383 -v /var/run/docker.sock:/var/run/docker.sock -v /tmp/jinad:/tmp/jinad -p 8000:8000 -d jinaai/jina:test-daemon
            fi
            pytest --suppress-no-test-exit-code --force-flaky --min-passes 1 --max-runs 5 --cov=jina --cov-report=xml --timeout=600 -v -s ${{ matrix.test-path }}
            docker rm -f jinad || true
          else
            SUB='daemon'
            if [[ "${{ matrix.test-path }}" == *"$SUB"* ]]; then
              echo "skip daemon tests"
              pytest --suppress-no-test-exit-code --force-flaky --min-passes 1 --max-runs 5 --cov=daemon --cov-report=xml --timeout=600 -v -s --ignore-glob='tests/integration/hub_usage/dummyhub*' ${{ matrix.test-path }}
            else
              pytest --suppress-no-test-exit-code --force-flaky --min-passes 1 --max-runs 5 --cov=jina --cov-report=xml --timeout=600 -v -s --ignore-glob='tests/integration/hub_usage/dummyhub*' ${{ matrix.test-path }}
            fi
          fi
          SUB='daemon'
          if [[ "${{ matrix.test-path }}" == *"$SUB"* ]]; then
            echo "flag it as daemon for codeoverage"
            echo "::set-output name=codecov_flag::daemon"
          else
            echo "flag it as jina for codeoverage"
            echo "::set-output name=codecov_flag::jina"
          fi

        timeout-minutes: 30
      - name: Check codecov file
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "coverage.xml"
      - name: Upload coverage from test to Codecov
        uses: codecov/codecov-action@v2
        if: steps.check_files.outputs.files_exists == 'true' && ${{ matrix.python-version }} == '3.7'
        with:
          file: coverage.xml
          name: ${{ matrix.test-path }}-codecov
          flags: ${{ steps.test.outputs.codecov_flag }}
          fail_ci_if_error: false

  # just for blocking the merge until all parallel core-test are successful
  success-all-test:
    runs-on: ubuntu-latest
    needs: [core-test, hub-test, k8s-test, docker-compose-test, docker-image-test, check-docstring, check-black, code-injection]
    if: always()
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - name: Check Failure
        if: env.WORKFLOW_CONCLUSION == 'failure'
        run: exit 1
      - name: Success
        if: ${{ success() }}
        run: echo "All Done"
