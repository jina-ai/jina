name: CD

on:
  push:
    branches:
      - master

#on:
#  push:
#    branches-ignore:
#      - '**'  # temporally ignore all


jobs:
  update-schema:
    if: |
      !startsWith(github.event.head_commit.message, 'chore') &&
      !startsWith(github.event.head_commit.message, 'build: hotfix') &&
      !endsWith(github.event.head_commit.message, 'reformatted by jina-dev-bot')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.5.0
        with:
#          submodules: true
          fetch-depth: 100
      - run: |
          truncate --size=24KB README.md > README-trunc.md
      - uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_DEVBOT_USER  }}
          password: ${{ secrets.DOCKERHUB_DEVBOT_PWD }}
          repository: jinaai/jina
          readme-filepath: ./README-trunc.md
      - uses: actions/checkout@v2.5.0
        with:
          repository: jina-ai/api
          path: schema
          token: ${{ secrets.JINA_DEV_BOT }}
      - uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - run: |
          pip install . --no-cache-dir
          JINA_VERSION=$(sed -n '/^__version__/p' ./jina/__init__.py | cut -d \' -f2)-master
          echo "JINA_VERSION=${JINA_VERSION}" >> $GITHUB_ENV
          cd schema
          mkdir -p schemas
          jina export schema --schema-path schemas/"$JINA_VERSION.json" schemas/master.json schemas/master --yaml-path "$JINA_VERSION.yml" master.yml --json-path "$JINA_VERSION.json" master.json master
          python ../scripts/get-openapi-schemas.py
          npm install --prefix ~ snippet-enricher-cli
          ~/node_modules/.bin/snippet-enricher-cli --input=gateway.json --targets=shell_curl > gateway-with-code.json
          cd -
      - name: redoc-cli-gateway
        uses: seeebiii/redoc-cli-github-action@v10
        with:
          args: 'bundle schema/gateway-with-code.json -o rest.html'
      - name: push-to-api-repo
        run: |
          mkdir -p schema/rest/
          cp rest.html schema/rest/master.html
          cp schema/gateway.json schema/rest/master.json
          rm schema/gateway.json schema/gateway-with-code.json
          cd schema
          git config --local user.email "dev-bot@jina.ai"
          git config --local user.name "Jina Dev Bot"
          if [[ `git status --porcelain` ]]; then
            git pull && git add . && git commit -m "update ${{env.JINA_VERSION}} due to ${{github.event_name}} on ${{github.repository}}" && git push
          fi

      - name: Pre-release (.devN)
        run: |
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
          pip install twine wheel
          ./scripts/release.sh
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
          JINA_SLACK_WEBHOOK: ${{ secrets.JINA_SLACK_WEBHOOK }}

  update-docker:
    needs: update-schema
    runs-on: ubuntu-latest
    steps:
      - uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Manual Docker Build
          inputs: '{ "release_token": "${{ env.release_token }}", "triggered_by": "CD"}'
          token: ${{ secrets.JINA_DEV_BOT }}
        env:
          release_token: ${{ secrets.JINA_CORE_RELEASE_TOKEN }}

  prep-testbed:
    runs-on: ubuntu-latest
    needs: update-schema
    env:
      release_token: ${{ secrets.JINA_CORE_RELEASE_TOKEN }}
    steps:
      - uses: actions/checkout@v2.5.0
      - id: set-matrix
        run: |
          sudo apt-get install jq
          export value=$(bash scripts/get-all-test-paths.sh)
          echo "matrix=$value" >> $GITHUB_OUTPUT
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  docarray-v-two-test:
    needs: prep-testbed
    runs-on: ubuntu-latest
    env:
      JINA_RANDOM_PORT_MIN: 16384
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]
    steps:
      - uses: actions/checkout@v2.5.0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Prepare environment
        run: |
          docker build -f Dockerfiles/test-pip.Dockerfile -t jinaai/jina:test-pip .
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install -U protobuf==3.20.3
          pip install ".[common,devel,test]" --no-cache-dir
          pip install -U "git+https://github.com/docarray/docarray@feat-rewrite-v2#egg=docarray[common]"
          jina
          export JINA_LOG_LEVEL="ERROR"
      - name: Test
        id: test
        run: |
          pytest --suppress-no-test-exit-code --force-flaky --min-passes 1 --max-runs 5 --cov=jina --cov-report=xml --timeout=600 -v -s --ignore-glob='tests/integration/hub_usage/dummyhub*' tests/integration/docarray_v2

          echo "flag it as jina for codeoverage"
          echo "codecov_flag=jina" >> $GITHUB_OUTPUT
        timeout-minutes: 30
        env:
          JINA_AUTH_TOKEN: "${{ secrets.JINA_AUTH_TOKEN }}"
      - name: Check codecov file
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "coverage.xml"
      - name: Upload coverage from test to Codecov
        uses: codecov/codecov-action@v3.1.1
        if: steps.check_files.outputs.files_exists == 'true' && ${{ matrix.python-version }} == '3.7'
        with:
          file: coverage.xml
          name: ${{ matrix.test-path }}-codecov
          flags: ${{ steps.test.outputs.codecov_flag }}
          fail_ci_if_error: false

  core-test:
    needs: prep-testbed
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]
        test-path: ${{fromJson(needs.prep-testbed.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2.5.0
#        with:
#          submodules: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Prepare environment
        run: |
          docker build -f Dockerfiles/test-pip.Dockerfile -t jinaai/jina:test-pip .
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install ".[all]" --no-cache-dir
          jina
          export JINA_LOG_LEVEL="ERROR"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Test
        id: test
        run: |
          pytest --suppress-no-test-exit-code --force-flaky --min-passes 1 --max-runs 5 --cov=jina --cov-report=xml --timeout=600 -v -s --ignore-glob='tests/integration/docarray_v2/*' --ignore-glob='tests/integration/hub_usage/dummyhub*' ${{ matrix.test-path }}
          echo "flag it as jina for codeoverage"
          echo "codecov_flag=jina" >> $GITHUB_OUTPUT
        timeout-minutes: 30
        env:
          JINAHUB_USERNAME: ${{ secrets.JINAHUB_USERNAME }}
          JINAHUB_PASSWORD: ${{ secrets.JINAHUB_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JINA_AUTH_TOKEN: "${{ secrets.JINA_AUTH_TOKEN }}"
      - name: Check file existence
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "coverage.xml"
      - name: Upload coverage from test to Codecov
        uses: codecov/codecov-action@v3.1.1
        if: steps.check_files.outputs.files_exists == 'true' && ${{ matrix.python-version }} == '3.7'
        with:
          file: coverage.xml
          name: ${{ matrix.test-path }}-codecov
          flags: ${{ steps.test.outputs.codecov_flag }}
          fail_ci_if_error: false

  import-test:
    runs-on: ubuntu-latest
    needs: update-schema
    strategy:
      fail-fast: false
      matrix:
        core: ['', 'true']
        perf: ['', 'true']
        python-env: ['3.7', '3.8', '3.9', '3.10', '3.11']
        exclude: 
          - core: 'true'
            perf: 'true'
    steps:
      - uses: actions/checkout@v2.5.0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-env }}
      - name: Prepare enviroment
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install --no-cache-dir .
        env:
          JINA_PIP_INSTALL_CORE: ${{ matrix.core }}
          JINA_PIP_INSTALL_PERF: ${{ matrix.perf }}
      - name: Test basic import
        run: python -c 'from jina import Executor,requests,Client,Flow,dynamic_batching,Document,DocumentArray'
  docker-image-test:
    needs: update-schema
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    strategy:
      fail-fast: false
      matrix:
        test-arch: ["linux/amd64", "linux/arm64"]
    steps:
      #      - name: Cancel Previous Runs
      #        uses: styfle/cancel-workflow-action@0.9.0
      #        with:
      #          access_token: ${{ github.token }}
      - uses: actions/checkout@v2.5.0
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
          driver-opts: network=host
      - run: |
          docker run --privileged --rm tonistiigi/binfmt --uninstall qemu-aarch64
          docker run --rm --privileged tonistiigi/binfmt --install all
      - name: Build and test
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfiles/debianx.Dockerfile
          platforms: ${{ matrix.test-arch }}
          push: true
          tags: localhost:5000/jina/multiarch:latest
          target: jina
      - run: |
          docker run --platform ${{ matrix.test-arch }} localhost:5000/jina/multiarch:latest -v

  hub-test:
    needs: update-schema
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.head.repo.fork }}
    steps:
      #      - name: Cancel Previous Runs
      #        uses: styfle/cancel-workflow-action@0.9.0
      #        with:
      #          access_token: ${{ github.token }}
      - uses: actions/checkout@v2.5.0
      - name: Set up Python 3.7
        uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Test hubapp with hubpods
        run: |
          ./tests/jinahub/test_integration.sh
        timeout-minutes: 30
        env:
          JINAHUB_USERNAME: ${{ secrets.JINAHUB_USERNAME }}
          JINAHUB_PASSWORD: ${{ secrets.JINAHUB_PASSWORD }}

  k8s-flow-test:
    needs: update-schema
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.5.0
      - name: Set up Python 3.7
        uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Prepare enviroment
        run: |
          docker build -f Dockerfiles/test-pip.Dockerfile -t jinaai/jina:test-pip .
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install ".[all]" --no-cache-dir
          jina
          export JINA_LOG_LEVEL="ERROR"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Test k8s Flow
        run: |
          export LINKERD2_VERSION=stable-2.11.4
          curl --proto '=https' --tlsv1.2 -sSfL https://run.linkerd.io/install | sh
          pytest -v -s --suppress-no-test-exit-code --force-flaky --min-passes 1 --max-runs 5 --cov=jina --cov-report=xml ./tests/k8s/test_k8s_flow.py
        timeout-minutes: 30
      - name: Check codecov file
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "coverage.xml"
      - name: Upload coverage from test to Codecov
        uses: codecov/codecov-action@v3.1.1
        if: steps.check_files.outputs.files_exists == 'true' && ${{ matrix.python-version }} == '3.7'
        with:
          file: coverage.xml
          name: ${{ matrix.test-path }}-codecov
          flags: ${{ steps.test.outputs.codecov_flag }}
          fail_ci_if_error: false

  k8s-graceful-and-deployment-test:
    needs: update-schema
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.5.0
      - name: Set up Python 3.7
        uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Prepare enviroment
        run: |
          docker build -f Dockerfiles/test-pip.Dockerfile -t jinaai/jina:test-pip .
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install ".[all]" --no-cache-dir
          jina
          export JINA_LOG_LEVEL="ERROR"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Test graceful request handling on k8s and Executor deployment on k8s
        run: |
          export LINKERD2_VERSION=stable-2.11.4
          curl --proto '=https' --tlsv1.2 -sSfL https://run.linkerd.io/install | sh
          pytest -v -s --suppress-no-test-exit-code --force-flaky --min-passes 1 --max-runs 5 --cov=jina --cov-report=xml ./tests/k8s/test_k8s_deployment.py ./tests/k8s/test_k8s_graceful_request_handling.py
        timeout-minutes: 30
      - name: Check codecov file
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "coverage.xml"
      - name: Upload coverage from test to Codecov
        uses: codecov/codecov-action@v3.1.1
        if: steps.check_files.outputs.files_exists == 'true' && ${{ matrix.python-version }} == '3.7'
        with:
          file: coverage.xml
          name: ${{ matrix.test-path }}-codecov
          flags: ${{ steps.test.outputs.codecov_flag }}
          fail_ci_if_error: false

  k8s-failures-test:
    runs-on: ubuntu-latest
    needs: update-schema
    steps:
      - uses: actions/checkout@v2.5.0
      - name: Set up Python 3.7
        uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Prepare enviroment
        run: |
          docker build -f Dockerfiles/test-pip.Dockerfile -t jinaai/jina:test-pip .
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install ".[all]" --no-cache-dir
          jina
          export JINA_LOG_LEVEL="ERROR"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Test k8s failures
        run: |
          export LINKERD2_VERSION=stable-2.11.4
          curl --proto '=https' --tlsv1.2 -sSfL https://run.linkerd.io/install | sh
          curl --proto '=https' --tlsv1.2 -sSfL https://linkerd.github.io/linkerd-smi/install | sh
          pytest -v -s --suppress-no-test-exit-code --force-flaky --min-passes 1 --max-runs 5 --cov=jina --cov-report=xml ./tests/k8s/test_k8s_failures.py
        timeout-minutes: 30
      - name: Check codecov file
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "coverage.xml"
      - name: Upload coverage from test to Codecov
        uses: codecov/codecov-action@v3.1.1
        if: steps.check_files.outputs.files_exists == 'true' && ${{ matrix.python-version }} == '3.7'
        with:
          file: coverage.xml
          name: ${{ matrix.test-path }}-codecov
          flags: ${{ steps.test.outputs.codecov_flag }}
          fail_ci_if_error: false

  docker-compose-test:
    needs: update-schema
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.5.0
      - name: Set up Python 3.7
        uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Prepare enviroment
        run: |
          docker build -f Dockerfiles/test-pip.Dockerfile -t jinaai/jina:test-pip .
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install ".[all]" --no-cache-dir
          jina
          export JINA_LOG_LEVEL="ERROR"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Test docker compose
        run: |
          pytest -v -s --suppress-no-test-exit-code --force-flaky --min-passes 1 --max-runs 5 --cov=jina --cov-report=xml ./tests/docker_compose/test_*.py
        timeout-minutes: 30
      - name: Check codecov file
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "coverage.xml"
      - name: Upload coverage from test to Codecov
        uses: codecov/codecov-action@v3.1.1
        if: steps.check_files.outputs.files_exists == 'true' && ${{ matrix.python-version }} == '3.7'
        with:
          file: coverage.xml
          name: ${{ matrix.test-path }}-codecov
          flags: ${{ steps.test.outputs.codecov_flag }}
          fail_ci_if_error: false

  benchmark-pre-release:
    runs-on: ubuntu-latest
    needs: update-schema
    steps:
      - uses: actions/checkout@v2.5.0
        with:
          fetch-depth: 0
      - run: |
          INIT_FILE='jina/__init__.py'
          RELEASE_VER=$(sed -n '/^__version__/p' $INIT_FILE | cut -d \' -f2)
          LAST_VER=$(git tag -l | sort -V | tail -n1)
          COMMITS_SINCE_LAST_VER=$(git rev-list $LAST_VER..HEAD --count)
          NEXT_VER=$RELEASE_VER".dev"$COMMITS_SINCE_LAST_VER
          echo "NEXT_VER=$NEXT_VER" >> $GITHUB_ENV
      - uses: benc-uk/workflow-dispatch@v1
        with:
          token: ${{ secrets.JINA_DEV_BOT }}
          workflow: Benchmark Jina
          repo: jina-ai/jina-terraform
          ref: "main"
          inputs: '{ "pypi_releases": "[\"${{ env.NEXT_VER }}\"]"}'
  # just for blocking the merge until all parallel core-test are successful
  success-all-steps:
    runs-on: ubuntu-latest
    needs: [core-test, docarray-v-two-test, import-test, hub-test, k8s-flow-test, k8s-graceful-and-deployment-test, k8s-failures-test, docker-compose-test, docker-image-test, benchmark-pre-release, update-schema, update-docker]
    if: always()
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - name: Check Failure
        if: env.WORKFLOW_CONCLUSION == 'failure'
        run: exit 1
      - name: Success
        if: ${{ success() }}
        run: echo "All Done"
